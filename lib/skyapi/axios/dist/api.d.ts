/**
 * Skycoin REST API.
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.1
 * Contact: contact@skycoin.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference path="../custom.d.ts" />
import { Configuration } from "./configuration";
import { AxiosPromise, AxiosInstance } from 'axios';
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected axios: AxiosInstance;
    protected configuration: Configuration | undefined;
    constructor(configuration?: Configuration, basePath?: string, axios?: AxiosInstance);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: "RequiredError";
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface ApiV1ExplorerAddressInputs
 */
export interface ApiV1ExplorerAddressInputs {
    /**
     *
     * @type {string}
     * @memberof ApiV1ExplorerAddressInputs
     */
    owner?: string;
    /**
     *
     * @type {number}
     * @memberof ApiV1ExplorerAddressInputs
     */
    hours?: number;
    /**
     *
     * @type {number}
     * @memberof ApiV1ExplorerAddressInputs
     */
    calculatedHours?: number;
    /**
     *
     * @type {string}
     * @memberof ApiV1ExplorerAddressInputs
     */
    coins?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1ExplorerAddressInputs
     */
    uxid?: string;
}
/**
 *
 * @export
 * @interface ApiV1ExplorerAddressOutputs
 */
export interface ApiV1ExplorerAddressOutputs {
    /**
     *
     * @type {number}
     * @memberof ApiV1ExplorerAddressOutputs
     */
    hours?: number;
    /**
     *
     * @type {string}
     * @memberof ApiV1ExplorerAddressOutputs
     */
    dst?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1ExplorerAddressOutputs
     */
    coins?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1ExplorerAddressOutputs
     */
    uxid?: string;
}
/**
 *
 * @export
 * @interface ApiV1ExplorerAddressStatus
 */
export interface ApiV1ExplorerAddressStatus {
    /**
     *
     * @type {boolean}
     * @memberof ApiV1ExplorerAddressStatus
     */
    unconfirmed?: boolean;
    /**
     *
     * @type {number}
     * @memberof ApiV1ExplorerAddressStatus
     */
    blockSeq?: number;
    /**
     *
     * @type {number}
     * @memberof ApiV1ExplorerAddressStatus
     */
    label?: number;
    /**
     *
     * @type {boolean}
     * @memberof ApiV1ExplorerAddressStatus
     */
    confirmed?: boolean;
}
/**
 * BlockTransactionVerbose has readable transaction data for transactions inside a block. It differs from Transaction in that it includes metadata for transaction inputs and the calculated coinhour fee spent by the block
 * @export
 * @interface ApiV1PendingTxsTransaction
 */
export interface ApiV1PendingTxsTransaction {
    /**
     *
     * @type {Array<ApiV1ExplorerAddressOutputs>}
     * @memberof ApiV1PendingTxsTransaction
     */
    outputs?: Array<ApiV1ExplorerAddressOutputs>;
    /**
     *
     * @type {string}
     * @memberof ApiV1PendingTxsTransaction
     */
    innerHash?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ApiV1PendingTxsTransaction
     */
    inputs?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ApiV1PendingTxsTransaction
     */
    sigs?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ApiV1PendingTxsTransaction
     */
    length?: number;
    /**
     *
     * @type {string}
     * @memberof ApiV1PendingTxsTransaction
     */
    txid?: string;
    /**
     *
     * @type {number}
     * @memberof ApiV1PendingTxsTransaction
     */
    type?: number;
    /**
     *
     * @type {number}
     * @memberof ApiV1PendingTxsTransaction
     */
    timestamp?: number;
}
/**
 *
 * @export
 * @interface ApiV1WalletTransactionHoursSelection
 */
export interface ApiV1WalletTransactionHoursSelection {
    /**
     *
     * @type {string}
     * @memberof ApiV1WalletTransactionHoursSelection
     */
    mode?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1WalletTransactionHoursSelection
     */
    shareFactor?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1WalletTransactionHoursSelection
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ApiV1WalletTransactionTo
 */
export interface ApiV1WalletTransactionTo {
    /**
     *
     * @type {number}
     * @memberof ApiV1WalletTransactionTo
     */
    hours?: number;
    /**
     *
     * @type {string}
     * @memberof ApiV1WalletTransactionTo
     */
    address?: string;
    /**
     *
     * @type {number}
     * @memberof ApiV1WalletTransactionTo
     */
    coins?: number;
}
/**
 *
 * @export
 * @interface ApiV1WalletTransactionWallet
 */
export interface ApiV1WalletTransactionWallet {
    /**
     *
     * @type {Array<string>}
     * @memberof ApiV1WalletTransactionWallet
     */
    unspents?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ApiV1WalletTransactionWallet
     */
    addresses?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ApiV1WalletTransactionWallet
     */
    password?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1WalletTransactionWallet
     */
    id?: string;
}
/**
 *
 * @export
 * @interface ApiV1WalletsEntries
 */
export interface ApiV1WalletsEntries {
    /**
     *
     * @type {string}
     * @memberof ApiV1WalletsEntries
     */
    publicKey?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1WalletsEntries
     */
    address?: string;
}
/**
 *
 * @export
 * @interface ApiV1WalletsMeta
 */
export interface ApiV1WalletsMeta {
    /**
     *
     * @type {string}
     * @memberof ApiV1WalletsMeta
     */
    filename?: string;
    /**
     *
     * @type {boolean}
     * @memberof ApiV1WalletsMeta
     */
    encrypted?: boolean;
    /**
     *
     * @type {string}
     * @memberof ApiV1WalletsMeta
     */
    cryptoType?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1WalletsMeta
     */
    label?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1WalletsMeta
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1WalletsMeta
     */
    version?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1WalletsMeta
     */
    coin?: string;
    /**
     *
     * @type {number}
     * @memberof ApiV1WalletsMeta
     */
    timestamp?: number;
}
/**
 *
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     *
     * @type {string}
     * @memberof InlineObject
     */
    changeAddress?: string;
    /**
     *
     * @type {ApiV1WalletTransactionHoursSelection}
     * @memberof InlineObject
     */
    hoursSelection?: ApiV1WalletTransactionHoursSelection;
    /**
     *
     * @type {boolean}
     * @memberof InlineObject
     */
    ignoreUnconfirmed?: boolean;
    /**
     *
     * @type {Array<ApiV1WalletTransactionTo>}
     * @memberof InlineObject
     */
    to?: Array<ApiV1WalletTransactionTo>;
    /**
     *
     * @type {ApiV1WalletTransactionWallet}
     * @memberof InlineObject
     */
    wallet?: ApiV1WalletTransactionWallet;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     *
     * @type {number}
     * @memberof InlineResponse200
     */
    hours?: number;
    /**
     *
     * @type {number}
     * @memberof InlineResponse200
     */
    coins?: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200
     */
    uxid?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200
     */
    ownerAddress?: string;
    /**
     *
     * @type {number}
     * @memberof InlineResponse200
     */
    spentBlockSeq?: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200
     */
    spentTx?: string;
    /**
     *
     * @type {number}
     * @memberof InlineResponse200
     */
    time?: number;
    /**
     *
     * @type {number}
     * @memberof InlineResponse200
     */
    srcBlockSeq?: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200
     */
    srcTx?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse2001
     */
    csrfToken?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     *
     * @type {Array<ApiV1ExplorerAddressOutputs>}
     * @memberof InlineResponse2002
     */
    outputs?: Array<ApiV1ExplorerAddressOutputs>;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2002
     */
    innerHash?: string;
    /**
     *
     * @type {Array<ApiV1ExplorerAddressInputs>}
     * @memberof InlineResponse2002
     */
    inputs?: Array<ApiV1ExplorerAddressInputs>;
    /**
     *
     * @type {number}
     * @memberof InlineResponse2002
     */
    fee?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse2002
     */
    sigs?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof InlineResponse2002
     */
    length?: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2002
     */
    txid?: string;
    /**
     *
     * @type {number}
     * @memberof InlineResponse2002
     */
    type?: number;
    /**
     *
     * @type {ApiV1ExplorerAddressStatus}
     * @memberof InlineResponse2002
     */
    status?: ApiV1ExplorerAddressStatus;
    /**
     *
     * @type {number}
     * @memberof InlineResponse2002
     */
    timestamp?: number;
}
/**
 *
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     *
     * @type {number}
     * @memberof InlineResponse2003
     */
    lastReceived?: number;
    /**
     *
     * @type {number}
     * @memberof InlineResponse2003
     */
    lastSent?: number;
    /**
     *
     * @type {boolean}
     * @memberof InlineResponse2003
     */
    outgoing?: boolean;
    /**
     *
     * @type {number}
     * @memberof InlineResponse2003
     */
    mirror?: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2003
     */
    address?: string;
    /**
     *
     * @type {number}
     * @memberof InlineResponse2003
     */
    listenPort?: number;
    /**
     *
     * @type {boolean}
     * @memberof InlineResponse2003
     */
    isTrustedPeer?: boolean;
    /**
     *
     * @type {number}
     * @memberof InlineResponse2003
     */
    connectedAt?: number;
    /**
     *
     * @type {InlineResponse2003UnconfirmedVerifyTransaction}
     * @memberof InlineResponse2003
     */
    unconfirmedVerifyTransaction?: InlineResponse2003UnconfirmedVerifyTransaction;
    /**
     *
     * @type {number}
     * @memberof InlineResponse2003
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2003
     */
    state?: InlineResponse2003.StateEnum;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2003
     */
    userAgent?: string;
    /**
     *
     * @type {number}
     * @memberof InlineResponse2003
     */
    height?: number;
}
/**
 * @export
 * @namespace InlineResponse2003
 */
export declare namespace InlineResponse2003 {
    /**
     * @export
     * @enum {string}
     */
    enum StateEnum {
        Pending = "pending",
        Connected = "connected",
        Introduced = "introduced"
    }
}
/**
 * Represent unconfirmed transactions
 * @export
 * @interface InlineResponse2003UnconfirmedVerifyTransaction
 */
export interface InlineResponse2003UnconfirmedVerifyTransaction {
    /**
     *
     * @type {number}
     * @memberof InlineResponse2003UnconfirmedVerifyTransaction
     */
    burnFactor?: number;
    /**
     *
     * @type {number}
     * @memberof InlineResponse2003UnconfirmedVerifyTransaction
     */
    maxTransactionSize?: number;
    /**
     *
     * @type {number}
     * @memberof InlineResponse2003UnconfirmedVerifyTransaction
     */
    maxDecimals?: number;
}
/**
 *
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse2004
     */
    announced?: string;
    /**
     *
     * @type {boolean}
     * @memberof InlineResponse2004
     */
    isValid?: boolean;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2004
     */
    checked?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2004
     */
    received?: string;
    /**
     *
     * @type {ApiV1PendingTxsTransaction}
     * @memberof InlineResponse2004
     */
    transaction?: ApiV1PendingTxsTransaction;
}
/**
 *
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     *
     * @type {Array<ApiV1WalletsEntries>}
     * @memberof InlineResponse2005
     */
    entries?: Array<ApiV1WalletsEntries>;
    /**
     *
     * @type {ApiV1WalletsMeta}
     * @memberof InlineResponse2005
     */
    meta?: ApiV1WalletsMeta;
}
/**
 *
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse2006
     */
    address?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     *
     * @type {InlineResponse2007Data}
     * @memberof InlineResponse2007
     */
    data?: InlineResponse2007Data;
    /**
     *
     * @type {any}
     * @memberof InlineResponse2007
     */
    error?: any;
}
/**
 *
 * @export
 * @interface InlineResponse2007Data
 */
export interface InlineResponse2007Data {
    /**
     *
     * @type {number}
     * @memberof InlineResponse2007Data
     */
    version?: number;
}
/**
 *
 * @export
 * @interface InlineResponseDefault
 */
export interface InlineResponseDefault {
    /**
     *
     * @type {number}
     * @memberof InlineResponseDefault
     */
    code?: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponseDefault
     */
    message?: string;
}
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export declare const DefaultApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Returns the total number of unique address that have coins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addressCount(options?: any): RequestArgs;
    /**
     * Returns the historical, spent outputs associated with an address
     * @param {string} address address to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addressUxouts(address: string, options?: any): RequestArgs;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} addrs command separated list of addresses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    balanceGet(addrs: string, options?: any): RequestArgs;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} addrs command separated list of addresses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    balancePost(addrs: string, options?: any): RequestArgs;
    /**
     * Returns a block by hash or seq. Note: only one of hash or seq is allowed
     * @param {string} [hash]
     * @param {number} [seq]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    block(hash?: string, seq?: number, options?: any): RequestArgs;
    /**
     *
     * @summary Returns the blockchain metadata.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockchainMetadata(options?: any): RequestArgs;
    /**
     *
     * @summary Returns the blockchain sync progress.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockchainProgress(options?: any): RequestArgs;
    /**
     * or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose.
     * @summary blocksHandler returns blocks between a start and end point,
     * @param {number} [start]
     * @param {number} [end]
     * @param {Array<number>} [seqs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blocksGet(start?: number, end?: number, seqs?: number[], options?: any): RequestArgs;
    /**
     * or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose
     * @summary blocksHandler returns blocks between a start and end point,
     * @param {number} [start]
     * @param {number} [end]
     * @param {Array<number>} [seqs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blocksPost(start?: number, end?: number, seqs?: number[], options?: any): RequestArgs;
    /**
     * coinSupplyHandler returns coin distribution supply stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coinSupply(options?: any): RequestArgs;
    /**
     *
     * @summary Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    csrf(options?: any): RequestArgs;
    /**
     *
     * @summary defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    defaultConnections(options?: any): RequestArgs;
    /**
     * Returns all transactions (confirmed and unconfirmed) for an address
     * @param {string} [address] tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorerAddress(address?: string, options?: any): RequestArgs;
    /**
     *
     * @summary Returns node health data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    health(options?: any): RequestArgs;
    /**
     * Returns the most recent N blocks on the blockchain
     * @param {number} num
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lastBlocks(num: number, options?: any): RequestArgs;
    /**
     *
     * @summary This endpoint returns a specific connection.
     * @param {string} addr Address port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnection(addr: string, options?: any): RequestArgs;
    /**
     *
     * @summary This endpoint returns all outgoings connections.
     * @param {'pending' | 'connected' | 'introduced'} [states] Connection status.
     * @param {'connected' | 'introduced'} [direction] Direction of the connection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnections(states?: "pending" | "connected" | "introduced", direction?: "connected" | "introduced", options?: any): RequestArgs;
    /**
     * This endpoint disconnects a connection by ID or address
     * @param {string} id Address id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnectionsDisconnect(id: string, options?: any): RequestArgs;
    /**
     * This endpoint returns all connections found through peer exchange
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnectionsExchange(options?: any): RequestArgs;
    /**
     *
     * @summary trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnectionsTrust(options?: any): RequestArgs;
    /**
     *
     * @summary If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     * @param {Array<string>} [address]
     * @param {Array<string>} [hash]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outputsGet(address?: string[], hash?: string[], options?: any): RequestArgs;
    /**
     *
     * @summary If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     * @param {string} [address]
     * @param {string} [hash]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outputsPost(address?: string, hash?: string, options?: any): RequestArgs;
    /**
     * Returns pending (unconfirmed) transactions without verbose
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pendingTxs(options?: any): RequestArgs;
    /**
     * Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendUnconfirmedTxns(options?: any): RequestArgs;
    /**
     *
     * @summary Returns the top skycoin holders.
     * @param {boolean} [includeDistribution] include distribution addresses or not, default value false
     * @param {string} [n] include distribution addresses or not, default value false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    richlist(includeDistribution?: boolean, n?: string, options?: any): RequestArgs;
    /**
     * Returns a transaction identified by its txid hash with just id
     * @param {string} txid transaction hash
     * @param {boolean} [encoded] return as a raw encoded transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transaction(txid: string, encoded?: boolean, options?: any): RequestArgs;
    /**
     *
     * @summary Broadcast a hex-encoded, serialized transaction to the network.
     * @param {string} rawtx hex-encoded serialized transaction string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionInject(rawtx: string, options?: any): RequestArgs;
    /**
     *
     * @summary Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed.
     * @param {string} [txid] Transaction id hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionRaw(txid?: string, options?: any): RequestArgs;
    /**
     * Decode and verify an encoded transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionVerify(options?: any): RequestArgs;
    /**
     *
     * @summary Returns transactions that match the filters.
     * @param {string} [addrs] command separated list of addresses
     * @param {string} [confirmed] Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsGet(addrs?: string, confirmed?: string, options?: any): RequestArgs;
    /**
     *
     * @summary Returns transactions that match the filters.
     * @param {string} [addrs] command separated list of addresses
     * @param {string} [confirmed] Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsPost(addrs?: string, confirmed?: string, options?: any): RequestArgs;
    /**
     *
     * @summary Returns an unspent output by ID.
     * @param {string} [uxid] uxid to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uxout(uxid?: string, options?: any): RequestArgs;
    /**
     *
     * @summary Verifies a Skycoin address.
     * @param {string} address Address id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyAddress(address: string, options?: any): RequestArgs;
    /**
     * versionHandler returns the application version info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    version(options?: any): RequestArgs;
    /**
     *
     * @summary Returns a wallet by id.
     * @param {string} id tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wallet(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Returns the wallet's balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} id tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletBalance(id: string, options?: any): RequestArgs;
    /**
     * Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
     * @param {string} seed Wallet seed.
     * @param {string} label Wallet label.
     * @param {number} [scan] The number of addresses to scan ahead for balances.
     * @param {boolean} [encrypt] Encrypt wallet.
     * @param {string} [password] Wallet Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletCreate(seed: string, label: string, scan?: number, encrypt?: boolean, password?: string, options?: any): RequestArgs;
    /**
     *
     * @summary Decrypts wallet.
     * @param {string} id Wallet id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletDecrypt(id: string, password: string, options?: any): RequestArgs;
    /**
     *
     * @summary Encrypt wallet.
     * @param {string} id Wallet id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletEncrypt(id: string, password: string, options?: any): RequestArgs;
    /**
     * Returns the wallet directory path
     * @param {string} addr Address port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletFolder(addr: string, options?: any): RequestArgs;
    /**
     * Generates new addresses
     * @param {string} id Wallet Id
     * @param {string} [num] The number you want to generate
     * @param {string} [password] Wallet Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletNewAddress(id: string, num?: string, password?: string, options?: any): RequestArgs;
    /**
     * Returns the wallet directory path
     * @param {'128' | '256'} [entropy] Entropy bitSize.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletNewSeed(entropy?: "128" | "256", options?: any): RequestArgs;
    /**
     *
     * @summary Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
     * @param {string} id Wallet id.
     * @param {string} seed Wallet seed.
     * @param {string} [password] Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletRecover(id: string, seed: string, password?: string, options?: any): RequestArgs;
    /**
     *
     * @summary This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
     * @param {string} id Wallet Id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletSeed(id: string, password: string, options?: any): RequestArgs;
    /**
     *
     * @summary Verifies a wallet seed.
     * @param {string} [seed] Seed to be verified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletSeedVerify(seed?: string, options?: any): RequestArgs;
    /**
     * Creates and broadcasts a transaction sending money from one of our wallets to destination address.
     * @param {string} id Wallet id
     * @param {string} dst Recipient address
     * @param {string} coins Number of coins to spend, in droplets. 1 coin equals 1e6 droplets.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletSpent(id: string, dst: string, coins: string, password: string, options?: any): RequestArgs;
    /**
     * Creates a signed transaction
     * @param {InlineObject} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletTransaction(body: InlineObject, options?: any): RequestArgs;
    /**
     * Returns returns all unconfirmed transactions for all addresses in a given wallet verbose
     * @param {string} id Wallet id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletTransactions(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Unloads wallet from the wallet service.
     * @param {string} id Wallet Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletUnload(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Update the wallet.
     * @param {string} id Wallet Id.
     * @param {string} label The label the wallet will be updated to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletUpdate(id: string, label: string, options?: any): RequestArgs;
    /**
     * Returns all loaded wallets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wallets(options?: any): RequestArgs;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Returns the total number of unique address that have coins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addressCount(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * Returns the historical, spent outputs associated with an address
     * @param {string} address address to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addressUxouts(address: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200[]>;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} addrs command separated list of addresses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    balanceGet(addrs: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} addrs command separated list of addresses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    balancePost(addrs: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * Returns a block by hash or seq. Note: only one of hash or seq is allowed
     * @param {string} [hash]
     * @param {number} [seq]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    block(hash?: string, seq?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Returns the blockchain metadata.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockchainMetadata(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Returns the blockchain sync progress.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockchainProgress(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose.
     * @summary blocksHandler returns blocks between a start and end point,
     * @param {number} [start]
     * @param {number} [end]
     * @param {Array<number>} [seqs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blocksGet(start?: number, end?: number, seqs?: number[], options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose
     * @summary blocksHandler returns blocks between a start and end point,
     * @param {number} [start]
     * @param {number} [end]
     * @param {Array<number>} [seqs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blocksPost(start?: number, end?: number, seqs?: number[], options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * coinSupplyHandler returns coin distribution supply stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coinSupply(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     *
     * @summary Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    csrf(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>;
    /**
     *
     * @summary defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    defaultConnections(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     * Returns all transactions (confirmed and unconfirmed) for an address
     * @param {string} [address] tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorerAddress(address?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002[]>;
    /**
     *
     * @summary Returns node health data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    health(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * Returns the most recent N blocks on the blockchain
     * @param {number} num
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lastBlocks(num: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary This endpoint returns a specific connection.
     * @param {string} addr Address port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnection(addr: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>;
    /**
     *
     * @summary This endpoint returns all outgoings connections.
     * @param {'pending' | 'connected' | 'introduced'} [states] Connection status.
     * @param {'connected' | 'introduced'} [direction] Direction of the connection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnections(states?: "pending" | "connected" | "introduced", direction?: "connected" | "introduced", options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003[]>;
    /**
     * This endpoint disconnects a connection by ID or address
     * @param {string} id Address id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnectionsDisconnect(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * This endpoint returns all connections found through peer exchange
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnectionsExchange(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     *
     * @summary trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnectionsTrust(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     *
     * @summary If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     * @param {Array<string>} [address]
     * @param {Array<string>} [hash]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outputsGet(address?: string[], hash?: string[], options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     * @param {string} [address]
     * @param {string} [hash]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outputsPost(address?: string, hash?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * Returns pending (unconfirmed) transactions without verbose
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pendingTxs(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004[]>;
    /**
     * Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendUnconfirmedTxns(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     *
     * @summary Returns the top skycoin holders.
     * @param {boolean} [includeDistribution] include distribution addresses or not, default value false
     * @param {string} [n] include distribution addresses or not, default value false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    richlist(includeDistribution?: boolean, n?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * Returns a transaction identified by its txid hash with just id
     * @param {string} txid transaction hash
     * @param {boolean} [encoded] return as a raw encoded transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transaction(txid: string, encoded?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Broadcast a hex-encoded, serialized transaction to the network.
     * @param {string} rawtx hex-encoded serialized transaction string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionInject(rawtx: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed.
     * @param {string} [txid] Transaction id hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionRaw(txid?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * Decode and verify an encoded transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionVerify(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Returns transactions that match the filters.
     * @param {string} [addrs] command separated list of addresses
     * @param {string} [confirmed] Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsGet(addrs?: string, confirmed?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Returns transactions that match the filters.
     * @param {string} [addrs] command separated list of addresses
     * @param {string} [confirmed] Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsPost(addrs?: string, confirmed?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Returns an unspent output by ID.
     * @param {string} [uxid] uxid to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uxout(uxid?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Verifies a Skycoin address.
     * @param {string} address Address id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyAddress(address: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>;
    /**
     * versionHandler returns the application version info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    version(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     *
     * @summary Returns a wallet by id.
     * @param {string} id tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wallet(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Returns the wallet's balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} id tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletBalance(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
     * @param {string} seed Wallet seed.
     * @param {string} label Wallet label.
     * @param {number} [scan] The number of addresses to scan ahead for balances.
     * @param {boolean} [encrypt] Encrypt wallet.
     * @param {string} [password] Wallet Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletCreate(seed: string, label: string, scan?: number, encrypt?: boolean, password?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Decrypts wallet.
     * @param {string} id Wallet id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletDecrypt(id: string, password: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Encrypt wallet.
     * @param {string} id Wallet id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletEncrypt(id: string, password: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * Returns the wallet directory path
     * @param {string} addr Address port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletFolder(addr: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>;
    /**
     * Generates new addresses
     * @param {string} id Wallet Id
     * @param {string} [num] The number you want to generate
     * @param {string} [password] Wallet Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletNewAddress(id: string, num?: string, password?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * Returns the wallet directory path
     * @param {'128' | '256'} [entropy] Entropy bitSize.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletNewSeed(entropy?: "128" | "256", options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
     * @param {string} id Wallet id.
     * @param {string} seed Wallet seed.
     * @param {string} [password] Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletRecover(id: string, seed: string, password?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
     * @param {string} id Wallet Id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletSeed(id: string, password: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Verifies a wallet seed.
     * @param {string} [seed] Seed to be verified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletSeedVerify(seed?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * Creates and broadcasts a transaction sending money from one of our wallets to destination address.
     * @param {string} id Wallet id
     * @param {string} dst Recipient address
     * @param {string} coins Number of coins to spend, in droplets. 1 coin equals 1e6 droplets.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletSpent(id: string, dst: string, coins: string, password: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * Creates a signed transaction
     * @param {InlineObject} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletTransaction(body: InlineObject, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * Returns returns all unconfirmed transactions for all addresses in a given wallet verbose
     * @param {string} id Wallet id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletTransactions(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Unloads wallet from the wallet service.
     * @param {string} id Wallet Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletUnload(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     *
     * @summary Update the wallet.
     * @param {string} id Wallet Id.
     * @param {string} label The label the wallet will be updated to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletUpdate(id: string, label: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * Returns all loaded wallets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wallets(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005[]>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Returns the total number of unique address that have coins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addressCount(options?: any): AxiosPromise<any>;
    /**
     * Returns the historical, spent outputs associated with an address
     * @param {string} address address to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addressUxouts(address: string, options?: any): AxiosPromise<InlineResponse200[]>;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} addrs command separated list of addresses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    balanceGet(addrs: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} addrs command separated list of addresses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    balancePost(addrs: string, options?: any): AxiosPromise<any>;
    /**
     * Returns a block by hash or seq. Note: only one of hash or seq is allowed
     * @param {string} [hash]
     * @param {number} [seq]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    block(hash?: string, seq?: number, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the blockchain metadata.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockchainMetadata(options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the blockchain sync progress.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockchainProgress(options?: any): AxiosPromise<any>;
    /**
     * or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose.
     * @summary blocksHandler returns blocks between a start and end point,
     * @param {number} [start]
     * @param {number} [end]
     * @param {Array<number>} [seqs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blocksGet(start?: number, end?: number, seqs?: number[], options?: any): AxiosPromise<any>;
    /**
     * or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose
     * @summary blocksHandler returns blocks between a start and end point,
     * @param {number} [start]
     * @param {number} [end]
     * @param {Array<number>} [seqs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blocksPost(start?: number, end?: number, seqs?: number[], options?: any): AxiosPromise<any>;
    /**
     * coinSupplyHandler returns coin distribution supply stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coinSupply(options?: any): AxiosPromise<Response>;
    /**
     *
     * @summary Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    csrf(options?: any): AxiosPromise<InlineResponse2001>;
    /**
     *
     * @summary defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    defaultConnections(options?: any): AxiosPromise<string[]>;
    /**
     * Returns all transactions (confirmed and unconfirmed) for an address
     * @param {string} [address] tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explorerAddress(address?: string, options?: any): AxiosPromise<InlineResponse2002[]>;
    /**
     *
     * @summary Returns node health data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    health(options?: any): AxiosPromise<any>;
    /**
     * Returns the most recent N blocks on the blockchain
     * @param {number} num
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lastBlocks(num: number, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary This endpoint returns a specific connection.
     * @param {string} addr Address port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnection(addr: string, options?: any): AxiosPromise<InlineResponse2003>;
    /**
     *
     * @summary This endpoint returns all outgoings connections.
     * @param {'pending' | 'connected' | 'introduced'} [states] Connection status.
     * @param {'connected' | 'introduced'} [direction] Direction of the connection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnections(states?: "pending" | "connected" | "introduced", direction?: "connected" | "introduced", options?: any): AxiosPromise<InlineResponse2003[]>;
    /**
     * This endpoint disconnects a connection by ID or address
     * @param {string} id Address id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnectionsDisconnect(id: string, options?: any): AxiosPromise<Response>;
    /**
     * This endpoint returns all connections found through peer exchange
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnectionsExchange(options?: any): AxiosPromise<string[]>;
    /**
     *
     * @summary trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnectionsTrust(options?: any): AxiosPromise<string[]>;
    /**
     *
     * @summary If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     * @param {Array<string>} [address]
     * @param {Array<string>} [hash]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outputsGet(address?: string[], hash?: string[], options?: any): AxiosPromise<any>;
    /**
     *
     * @summary If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     * @param {string} [address]
     * @param {string} [hash]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outputsPost(address?: string, hash?: string, options?: any): AxiosPromise<any>;
    /**
     * Returns pending (unconfirmed) transactions without verbose
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pendingTxs(options?: any): AxiosPromise<InlineResponse2004[]>;
    /**
     * Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendUnconfirmedTxns(options?: any): AxiosPromise<Response>;
    /**
     *
     * @summary Returns the top skycoin holders.
     * @param {boolean} [includeDistribution] include distribution addresses or not, default value false
     * @param {string} [n] include distribution addresses or not, default value false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    richlist(includeDistribution?: boolean, n?: string, options?: any): AxiosPromise<any>;
    /**
     * Returns a transaction identified by its txid hash with just id
     * @param {string} txid transaction hash
     * @param {boolean} [encoded] return as a raw encoded transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transaction(txid: string, encoded?: boolean, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Broadcast a hex-encoded, serialized transaction to the network.
     * @param {string} rawtx hex-encoded serialized transaction string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionInject(rawtx: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed.
     * @param {string} [txid] Transaction id hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionRaw(txid?: string, options?: any): AxiosPromise<any>;
    /**
     * Decode and verify an encoded transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionVerify(options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns transactions that match the filters.
     * @param {string} [addrs] command separated list of addresses
     * @param {string} [confirmed] Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsGet(addrs?: string, confirmed?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns transactions that match the filters.
     * @param {string} [addrs] command separated list of addresses
     * @param {string} [confirmed] Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsPost(addrs?: string, confirmed?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns an unspent output by ID.
     * @param {string} [uxid] uxid to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uxout(uxid?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Verifies a Skycoin address.
     * @param {string} address Address id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyAddress(address: string, options?: any): AxiosPromise<InlineResponse2007>;
    /**
     * versionHandler returns the application version info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    version(options?: any): AxiosPromise<Response>;
    /**
     *
     * @summary Returns a wallet by id.
     * @param {string} id tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wallet(id: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the wallet's balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} id tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletBalance(id: string, options?: any): AxiosPromise<any>;
    /**
     * Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
     * @param {string} seed Wallet seed.
     * @param {string} label Wallet label.
     * @param {number} [scan] The number of addresses to scan ahead for balances.
     * @param {boolean} [encrypt] Encrypt wallet.
     * @param {string} [password] Wallet Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletCreate(seed: string, label: string, scan?: number, encrypt?: boolean, password?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Decrypts wallet.
     * @param {string} id Wallet id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletDecrypt(id: string, password: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Encrypt wallet.
     * @param {string} id Wallet id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletEncrypt(id: string, password: string, options?: any): AxiosPromise<any>;
    /**
     * Returns the wallet directory path
     * @param {string} addr Address port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletFolder(addr: string, options?: any): AxiosPromise<InlineResponse2006>;
    /**
     * Generates new addresses
     * @param {string} id Wallet Id
     * @param {string} [num] The number you want to generate
     * @param {string} [password] Wallet Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletNewAddress(id: string, num?: string, password?: string, options?: any): AxiosPromise<any>;
    /**
     * Returns the wallet directory path
     * @param {'128' | '256'} [entropy] Entropy bitSize.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletNewSeed(entropy?: "128" | "256", options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
     * @param {string} id Wallet id.
     * @param {string} seed Wallet seed.
     * @param {string} [password] Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletRecover(id: string, seed: string, password?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
     * @param {string} id Wallet Id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletSeed(id: string, password: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Verifies a wallet seed.
     * @param {string} [seed] Seed to be verified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletSeedVerify(seed?: string, options?: any): AxiosPromise<any>;
    /**
     * Creates and broadcasts a transaction sending money from one of our wallets to destination address.
     * @param {string} id Wallet id
     * @param {string} dst Recipient address
     * @param {string} coins Number of coins to spend, in droplets. 1 coin equals 1e6 droplets.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletSpent(id: string, dst: string, coins: string, password: string, options?: any): AxiosPromise<any>;
    /**
     * Creates a signed transaction
     * @param {InlineObject} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletTransaction(body: InlineObject, options?: any): AxiosPromise<any>;
    /**
     * Returns returns all unconfirmed transactions for all addresses in a given wallet verbose
     * @param {string} id Wallet id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletTransactions(id: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Unloads wallet from the wallet service.
     * @param {string} id Wallet Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletUnload(id: string, options?: any): AxiosPromise<Response>;
    /**
     *
     * @summary Update the wallet.
     * @param {string} id Wallet Id.
     * @param {string} label The label the wallet will be updated to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletUpdate(id: string, label: string, options?: any): AxiosPromise<Response>;
    /**
     * Returns all loaded wallets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wallets(options?: any): AxiosPromise<InlineResponse2005[]>;
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI {
    /**
     *
     * @summary Returns the total number of unique address that have coins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    addressCount(options?: any): AxiosPromise<any>;
    /**
     * Returns the historical, spent outputs associated with an address
     * @param {string} address address to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    addressUxouts(address: string, options?: any): AxiosPromise<InlineResponse200[]>;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} addrs command separated list of addresses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    balanceGet(addrs: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} addrs command separated list of addresses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    balancePost(addrs: string, options?: any): AxiosPromise<any>;
    /**
     * Returns a block by hash or seq. Note: only one of hash or seq is allowed
     * @param {string} [hash]
     * @param {number} [seq]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    block(hash?: string, seq?: number, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the blockchain metadata.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    blockchainMetadata(options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the blockchain sync progress.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    blockchainProgress(options?: any): AxiosPromise<any>;
    /**
     * or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose.
     * @summary blocksHandler returns blocks between a start and end point,
     * @param {number} [start]
     * @param {number} [end]
     * @param {Array<number>} [seqs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    blocksGet(start?: number, end?: number, seqs?: Array<number>, options?: any): AxiosPromise<any>;
    /**
     * or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose
     * @summary blocksHandler returns blocks between a start and end point,
     * @param {number} [start]
     * @param {number} [end]
     * @param {Array<number>} [seqs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    blocksPost(start?: number, end?: number, seqs?: Array<number>, options?: any): AxiosPromise<any>;
    /**
     * coinSupplyHandler returns coin distribution supply stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    coinSupply(options?: any): AxiosPromise<Response>;
    /**
     *
     * @summary Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    csrf(options?: any): AxiosPromise<InlineResponse2001>;
    /**
     *
     * @summary defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    defaultConnections(options?: any): AxiosPromise<string[]>;
    /**
     * Returns all transactions (confirmed and unconfirmed) for an address
     * @param {string} [address] tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    explorerAddress(address?: string, options?: any): AxiosPromise<InlineResponse2002[]>;
    /**
     *
     * @summary Returns node health data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    health(options?: any): AxiosPromise<any>;
    /**
     * Returns the most recent N blocks on the blockchain
     * @param {number} num
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    lastBlocks(num: number, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary This endpoint returns a specific connection.
     * @param {string} addr Address port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    networkConnection(addr: string, options?: any): AxiosPromise<InlineResponse2003>;
    /**
     *
     * @summary This endpoint returns all outgoings connections.
     * @param {'pending' | 'connected' | 'introduced'} [states] Connection status.
     * @param {'connected' | 'introduced'} [direction] Direction of the connection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    networkConnections(states?: 'pending' | 'connected' | 'introduced', direction?: 'connected' | 'introduced', options?: any): AxiosPromise<InlineResponse2003[]>;
    /**
     * This endpoint disconnects a connection by ID or address
     * @param {string} id Address id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    networkConnectionsDisconnect(id: string, options?: any): AxiosPromise<Response>;
    /**
     * This endpoint returns all connections found through peer exchange
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    networkConnectionsExchange(options?: any): AxiosPromise<string[]>;
    /**
     *
     * @summary trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    networkConnectionsTrust(options?: any): AxiosPromise<string[]>;
    /**
     *
     * @summary If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     * @param {Array<string>} [address]
     * @param {Array<string>} [hash]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    outputsGet(address?: Array<string>, hash?: Array<string>, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     * @param {string} [address]
     * @param {string} [hash]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    outputsPost(address?: string, hash?: string, options?: any): AxiosPromise<any>;
    /**
     * Returns pending (unconfirmed) transactions without verbose
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    pendingTxs(options?: any): AxiosPromise<InlineResponse2004[]>;
    /**
     * Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    resendUnconfirmedTxns(options?: any): AxiosPromise<Response>;
    /**
     *
     * @summary Returns the top skycoin holders.
     * @param {boolean} [includeDistribution] include distribution addresses or not, default value false
     * @param {string} [n] include distribution addresses or not, default value false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    richlist(includeDistribution?: boolean, n?: string, options?: any): AxiosPromise<any>;
    /**
     * Returns a transaction identified by its txid hash with just id
     * @param {string} txid transaction hash
     * @param {boolean} [encoded] return as a raw encoded transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    transaction(txid: string, encoded?: boolean, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Broadcast a hex-encoded, serialized transaction to the network.
     * @param {string} rawtx hex-encoded serialized transaction string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    transactionInject(rawtx: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed.
     * @param {string} [txid] Transaction id hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    transactionRaw(txid?: string, options?: any): AxiosPromise<any>;
    /**
     * Decode and verify an encoded transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    transactionVerify(options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns transactions that match the filters.
     * @param {string} [addrs] command separated list of addresses
     * @param {string} [confirmed] Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    transactionsGet(addrs?: string, confirmed?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns transactions that match the filters.
     * @param {string} [addrs] command separated list of addresses
     * @param {string} [confirmed] Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    transactionsPost(addrs?: string, confirmed?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns an unspent output by ID.
     * @param {string} [uxid] uxid to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    uxout(uxid?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Verifies a Skycoin address.
     * @param {string} address Address id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    verifyAddress(address: string, options?: any): AxiosPromise<InlineResponse2007>;
    /**
     * versionHandler returns the application version info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    version(options?: any): AxiosPromise<Response>;
    /**
     *
     * @summary Returns a wallet by id.
     * @param {string} id tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    wallet(id: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the wallet's balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} id tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletBalance(id: string, options?: any): AxiosPromise<any>;
    /**
     * Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
     * @param {string} seed Wallet seed.
     * @param {string} label Wallet label.
     * @param {number} [scan] The number of addresses to scan ahead for balances.
     * @param {boolean} [encrypt] Encrypt wallet.
     * @param {string} [password] Wallet Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletCreate(seed: string, label: string, scan?: number, encrypt?: boolean, password?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Decrypts wallet.
     * @param {string} id Wallet id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletDecrypt(id: string, password: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Encrypt wallet.
     * @param {string} id Wallet id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletEncrypt(id: string, password: string, options?: any): AxiosPromise<any>;
    /**
     * Returns the wallet directory path
     * @param {string} addr Address port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletFolder(addr: string, options?: any): AxiosPromise<InlineResponse2006>;
    /**
     * Generates new addresses
     * @param {string} id Wallet Id
     * @param {string} [num] The number you want to generate
     * @param {string} [password] Wallet Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletNewAddress(id: string, num?: string, password?: string, options?: any): AxiosPromise<any>;
    /**
     * Returns the wallet directory path
     * @param {'128' | '256'} [entropy] Entropy bitSize.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletNewSeed(entropy?: '128' | '256', options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
     * @param {string} id Wallet id.
     * @param {string} seed Wallet seed.
     * @param {string} [password] Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletRecover(id: string, seed: string, password?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
     * @param {string} id Wallet Id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletSeed(id: string, password: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Verifies a wallet seed.
     * @param {string} [seed] Seed to be verified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletSeedVerify(seed?: string, options?: any): AxiosPromise<any>;
    /**
     * Creates and broadcasts a transaction sending money from one of our wallets to destination address.
     * @param {string} id Wallet id
     * @param {string} dst Recipient address
     * @param {string} coins Number of coins to spend, in droplets. 1 coin equals 1e6 droplets.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletSpent(id: string, dst: string, coins: string, password: string, options?: any): AxiosPromise<any>;
    /**
     * Creates a signed transaction
     * @param {InlineObject} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletTransaction(body: InlineObject, options?: any): AxiosPromise<any>;
    /**
     * Returns returns all unconfirmed transactions for all addresses in a given wallet verbose
     * @param {string} id Wallet id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletTransactions(id: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Unloads wallet from the wallet service.
     * @param {string} id Wallet Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletUnload(id: string, options?: any): AxiosPromise<Response>;
    /**
     *
     * @summary Update the wallet.
     * @param {string} id Wallet Id.
     * @param {string} label The label the wallet will be updated to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletUpdate(id: string, label: string, options?: any): AxiosPromise<Response>;
    /**
     * Returns all loaded wallets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    wallets(options?: any): AxiosPromise<InlineResponse2005[]>;
}
