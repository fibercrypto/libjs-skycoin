/**
 * Skycoin REST API.
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.26.0
 * Contact: contact@skycoin.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference path="../custom.d.ts" />
import { Configuration } from "./configuration";
import { AxiosPromise, AxiosInstance } from 'axios';
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected axios: AxiosInstance;
    protected configuration: Configuration | undefined;
    constructor(configuration?: Configuration, basePath?: string, axios?: AxiosInstance);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: "RequiredError";
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface Address
 */
export interface Address {
    /**
     *
     * @type {string}
     * @memberof Address
     */
    address: string;
}
/**
 *
 * @export
 * @interface ApiV1PendingTxsTransaction
 */
export interface ApiV1PendingTxsTransaction {
    /**
     *
     * @type {number}
     * @memberof ApiV1PendingTxsTransaction
     */
    length?: number;
    /**
     *
     * @type {number}
     * @memberof ApiV1PendingTxsTransaction
     */
    type?: number;
    /**
     *
     * @type {string}
     * @memberof ApiV1PendingTxsTransaction
     */
    txid?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1PendingTxsTransaction
     */
    innerHash?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ApiV1PendingTxsTransaction
     */
    sigs?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ApiV1PendingTxsTransaction
     */
    inputs?: Array<string>;
    /**
     *
     * @type {Array<ApiV1PendingTxsTransactionOutputs>}
     * @memberof ApiV1PendingTxsTransaction
     */
    outputs?: Array<ApiV1PendingTxsTransactionOutputs>;
}
/**
 *
 * @export
 * @interface ApiV1PendingTxsTransactionOutputs
 */
export interface ApiV1PendingTxsTransactionOutputs {
    /**
     *
     * @type {string}
     * @memberof ApiV1PendingTxsTransactionOutputs
     */
    uxid?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1PendingTxsTransactionOutputs
     */
    dst?: string;
    /**
     *
     * @type {string}
     * @memberof ApiV1PendingTxsTransactionOutputs
     */
    coins?: string;
    /**
     *
     * @type {number}
     * @memberof ApiV1PendingTxsTransactionOutputs
     */
    hours?: number;
}
/**
 *
 * @export
 * @interface BlockSchema
 */
export interface BlockSchema {
    /**
     *
     * @type {BlockVerboseSchemaHeader}
     * @memberof BlockSchema
     */
    header?: BlockVerboseSchemaHeader;
    /**
     *
     * @type {BlockSchemaBody}
     * @memberof BlockSchema
     */
    body?: BlockSchemaBody;
    /**
     *
     * @type {number}
     * @memberof BlockSchema
     */
    size?: number;
}
/**
 *
 * @export
 * @interface BlockSchemaBody
 */
export interface BlockSchemaBody {
    /**
     *
     * @type {Array<any>}
     * @memberof BlockSchemaBody
     */
    txns?: Array<any>;
}
/**
 *
 * @export
 * @interface BlockVerboseSchema
 */
export interface BlockVerboseSchema {
    /**
     *
     * @type {BlockVerboseSchemaHeader}
     * @memberof BlockVerboseSchema
     */
    header?: BlockVerboseSchemaHeader;
    /**
     *
     * @type {BlockVerboseSchemaBody}
     * @memberof BlockVerboseSchema
     */
    body?: BlockVerboseSchemaBody;
    /**
     *
     * @type {number}
     * @memberof BlockVerboseSchema
     */
    size?: number;
}
/**
 *
 * @export
 * @interface BlockVerboseSchemaBody
 */
export interface BlockVerboseSchemaBody {
    /**
     *
     * @type {Array<any>}
     * @memberof BlockVerboseSchemaBody
     */
    txns?: Array<any>;
}
/**
 *
 * @export
 * @interface BlockVerboseSchemaHeader
 */
export interface BlockVerboseSchemaHeader {
    /**
     *
     * @type {number}
     * @memberof BlockVerboseSchemaHeader
     */
    seq?: number;
    /**
     *
     * @type {number}
     * @memberof BlockVerboseSchemaHeader
     */
    timestamp?: number;
    /**
     *
     * @type {number}
     * @memberof BlockVerboseSchemaHeader
     */
    fee?: number;
    /**
     *
     * @type {number}
     * @memberof BlockVerboseSchemaHeader
     */
    version?: number;
    /**
     *
     * @type {string}
     * @memberof BlockVerboseSchemaHeader
     */
    blockHash?: string;
    /**
     *
     * @type {string}
     * @memberof BlockVerboseSchemaHeader
     */
    previousBlockHash?: string;
    /**
     *
     * @type {string}
     * @memberof BlockVerboseSchemaHeader
     */
    txBodyHash?: string;
    /**
     *
     * @type {string}
     * @memberof BlockVerboseSchemaHeader
     */
    uxHash?: string;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     *
     * @type {number}
     * @memberof InlineResponse200
     */
    count?: number;
}
/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     *
     * @type {Array<BlockSchema>}
     * @memberof InlineResponse2001
     */
    blocks?: Array<BlockSchema>;
}
/**
 *
 * @export
 * @interface InlineResponse20010
 */
export interface InlineResponse20010 {
    /**
     *
     * @type {ApiV1PendingTxsTransaction}
     * @memberof InlineResponse20010
     */
    transaction?: ApiV1PendingTxsTransaction;
    /**
     *
     * @type {string}
     * @memberof InlineResponse20010
     */
    received?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse20010
     */
    checked?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse20010
     */
    announced?: string;
    /**
     *
     * @type {boolean}
     * @memberof InlineResponse20010
     */
    isValid?: boolean;
}
/**
 *
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * CurrentCoinHourSupply is coins hours in non distribution addresses.
     * @type {string}
     * @memberof InlineResponse2002
     */
    currentCoinhourSupply?: string;
    /**
     * Coins distributed beyond the project.
     * @type {string}
     * @memberof InlineResponse2002
     */
    currentSupply?: string;
    /**
     * Distribution addresses which are locked and do not count towards total supply.
     * @type {Array<string>}
     * @memberof InlineResponse2002
     */
    lockedDistributionAddresses?: Array<string>;
    /**
     * MaxSupply is the maximum number of coins to be distributed ever.
     * @type {string}
     * @memberof InlineResponse2002
     */
    maxSupply?: string;
    /**
     * TotalCoinHourSupply is coin hours in all addresses including unlocked distribution addresses.
     * @type {string}
     * @memberof InlineResponse2002
     */
    totalCoinhourSupply?: string;
    /**
     * TotalSupply is CurrentSupply plus coins held by the distribution addresses that are spendable.
     * @type {string}
     * @memberof InlineResponse2002
     */
    totalSupply?: string;
    /**
     * Distribution addresses which count towards total supply.
     * @type {Array<string>}
     * @memberof InlineResponse2002
     */
    unlockedDistributionAddresses?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse2003
     */
    csrfToken?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     *
     * @type {Array<NetworkConnectionSchema>}
     * @memberof InlineResponse2004
     */
    connections?: Array<NetworkConnectionSchema>;
}
/**
 *
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * git branch name
     * @type {string}
     * @memberof InlineResponse2005
     */
    branch?: string;
    /**
     * git commit id
     * @type {string}
     * @memberof InlineResponse2005
     */
    commit?: string;
    /**
     * version number
     * @type {string}
     * @memberof InlineResponse2005
     */
    version?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     *
     * @type {Array<TransactionEncoded>}
     * @memberof InlineResponse2006
     */
    transactions?: Array<TransactionEncoded>;
}
/**
 *
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse2007
     */
    address?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     *
     * @type {InlineResponse2008Data}
     * @memberof InlineResponse2008
     */
    data?: InlineResponse2008Data;
}
/**
 *
 * @export
 * @interface InlineResponse2008Data
 */
export interface InlineResponse2008Data {
    /**
     *
     * @type {Transaction}
     * @memberof InlineResponse2008Data
     */
    transaction?: Transaction;
}
/**
 *
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
    /**
     *
     * @type {any}
     * @memberof InlineResponse2009
     */
    data?: any;
}
/**
 *
 * @export
 * @interface InlineResponseDefault
 */
export interface InlineResponseDefault {
    /**
     *
     * @type {number}
     * @memberof InlineResponseDefault
     */
    code?: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponseDefault
     */
    message?: string;
}
/**
 *
 * @export
 * @interface NetworkConnectionSchema
 */
export interface NetworkConnectionSchema {
    /**
     *
     * @type {string}
     * @memberof NetworkConnectionSchema
     */
    address?: string;
    /**
     *
     * @type {number}
     * @memberof NetworkConnectionSchema
     */
    connectedAt?: number;
    /**
     *
     * @type {number}
     * @memberof NetworkConnectionSchema
     */
    height?: number;
    /**
     *
     * @type {number}
     * @memberof NetworkConnectionSchema
     */
    id?: number;
    /**
     *
     * @type {boolean}
     * @memberof NetworkConnectionSchema
     */
    isTrustedPeer?: boolean;
    /**
     *
     * @type {number}
     * @memberof NetworkConnectionSchema
     */
    lastReceived?: number;
    /**
     *
     * @type {number}
     * @memberof NetworkConnectionSchema
     */
    lastSent?: number;
    /**
     *
     * @type {number}
     * @memberof NetworkConnectionSchema
     */
    listenPort?: number;
    /**
     *
     * @type {number}
     * @memberof NetworkConnectionSchema
     */
    mirror?: number;
    /**
     *
     * @type {boolean}
     * @memberof NetworkConnectionSchema
     */
    outgoing?: boolean;
    /**
     *
     * @type {string}
     * @memberof NetworkConnectionSchema
     */
    state?: NetworkConnectionSchema.StateEnum;
    /**
     *
     * @type {NetworkConnectionSchemaUnconfirmedVerifyTransaction}
     * @memberof NetworkConnectionSchema
     */
    unconfirmedVerifyTransaction?: NetworkConnectionSchemaUnconfirmedVerifyTransaction;
    /**
     *
     * @type {string}
     * @memberof NetworkConnectionSchema
     */
    userAgent?: string;
}
/**
 * @export
 * @namespace NetworkConnectionSchema
 */
export declare namespace NetworkConnectionSchema {
    /**
     * @export
     * @enum {string}
     */
    enum StateEnum {
        Pending = "pending",
        Connected = "connected",
        Introduced = "introduced"
    }
}
/**
 * Represent unconfirmed transactions
 * @export
 * @interface NetworkConnectionSchemaUnconfirmedVerifyTransaction
 */
export interface NetworkConnectionSchemaUnconfirmedVerifyTransaction {
    /**
     *
     * @type {number}
     * @memberof NetworkConnectionSchemaUnconfirmedVerifyTransaction
     */
    burnFactor?: number;
    /**
     *
     * @type {number}
     * @memberof NetworkConnectionSchemaUnconfirmedVerifyTransaction
     */
    maxDecimals?: number;
    /**
     *
     * @type {number}
     * @memberof NetworkConnectionSchemaUnconfirmedVerifyTransaction
     */
    maxTransactionSize?: number;
}
/**
 *
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     *
     * @type {TransactionStatus}
     * @memberof Transaction
     */
    status?: TransactionStatus;
    /**
     *
     * @type {TransactionTxn}
     * @memberof Transaction
     */
    txn?: TransactionTxn;
    /**
     *
     * @type {number}
     * @memberof Transaction
     */
    time?: number;
}
/**
 *
 * @export
 * @interface TransactionEncoded
 */
export interface TransactionEncoded {
    /**
     *
     * @type {ApiV1PendingTxsTransaction}
     * @memberof TransactionEncoded
     */
    transaction?: ApiV1PendingTxsTransaction;
    /**
     *
     * @type {string}
     * @memberof TransactionEncoded
     */
    received?: string;
    /**
     *
     * @type {string}
     * @memberof TransactionEncoded
     */
    checked?: string;
    /**
     *
     * @type {string}
     * @memberof TransactionEncoded
     */
    announced?: string;
    /**
     *
     * @type {boolean}
     * @memberof TransactionEncoded
     */
    isValid?: boolean;
}
/**
 *
 * @export
 * @interface TransactionEncodedS
 */
export interface TransactionEncodedS {
    /**
     *
     * @type {number}
     * @memberof TransactionEncodedS
     */
    time?: number;
    /**
     *
     * @type {TransactionStatus}
     * @memberof TransactionEncodedS
     */
    status?: TransactionStatus;
    /**
     *
     * @type {string}
     * @memberof TransactionEncodedS
     */
    encodedTransaction?: string;
}
/**
 *
 * @export
 * @interface TransactionStatus
 */
export interface TransactionStatus {
    /**
     * If confirmed, the sequence of the block in which the transaction was executed
     * @type {number}
     * @memberof TransactionStatus
     */
    blockSeq?: number;
    /**
     *
     * @type {boolean}
     * @memberof TransactionStatus
     */
    confirmed?: boolean;
    /**
     * If confirmed, how many blocks deep in the chain it is. Will be at least 1 if confirmed
     * @type {number}
     * @memberof TransactionStatus
     */
    height?: number;
    /**
     *
     * @type {boolean}
     * @memberof TransactionStatus
     */
    unconfirmed?: boolean;
}
/**
 * TransactionVerbose has readable transaction data. It adds TransactionStatus to a BlockTransactionVerbose
 * @export
 * @interface TransactionTxn
 */
export interface TransactionTxn {
    /**
     *
     * @type {string}
     * @memberof TransactionTxn
     */
    innerHash?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof TransactionTxn
     */
    inputs?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof TransactionTxn
     */
    length?: number;
    /**
     *
     * @type {Array<any>}
     * @memberof TransactionTxn
     */
    outputs?: Array<any>;
    /**
     *
     * @type {Array<string>}
     * @memberof TransactionTxn
     */
    sigs?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof TransactionTxn
     */
    timestamp?: number;
    /**
     *
     * @type {string}
     * @memberof TransactionTxn
     */
    txid?: string;
    /**
     *
     * @type {number}
     * @memberof TransactionTxn
     */
    type?: number;
}
/**
 *
 * @export
 * @interface TransactionV2ParamsAddress
 */
export interface TransactionV2ParamsAddress {
    /**
     *
     * @type {TransactionV2ParamsAddressHoursSelection}
     * @memberof TransactionV2ParamsAddress
     */
    hoursSelection?: TransactionV2ParamsAddressHoursSelection;
}
/**
 *
 * @export
 * @interface TransactionV2ParamsAddressHoursSelection
 */
export interface TransactionV2ParamsAddressHoursSelection {
    /**
     *
     * @type {string}
     * @memberof TransactionV2ParamsAddressHoursSelection
     */
    type?: string;
}
/**
 *
 * @export
 * @interface TransactionV2ParamsUnspent
 */
export interface TransactionV2ParamsUnspent {
    /**
     *
     * @type {TransactionV2ParamsUnspentHoursSelection}
     * @memberof TransactionV2ParamsUnspent
     */
    hoursSelection?: TransactionV2ParamsUnspentHoursSelection;
    /**
     *
     * @type {Array<string>}
     * @memberof TransactionV2ParamsUnspent
     */
    unspents?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof TransactionV2ParamsUnspent
     */
    changeAddress?: string;
    /**
     *
     * @type {Array<TransactionV2ParamsUnspentTo>}
     * @memberof TransactionV2ParamsUnspent
     */
    to?: Array<TransactionV2ParamsUnspentTo>;
}
/**
 *
 * @export
 * @interface TransactionV2ParamsUnspentHoursSelection
 */
export interface TransactionV2ParamsUnspentHoursSelection {
    /**
     *
     * @type {string}
     * @memberof TransactionV2ParamsUnspentHoursSelection
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof TransactionV2ParamsUnspentHoursSelection
     */
    mode?: string;
    /**
     *
     * @type {string}
     * @memberof TransactionV2ParamsUnspentHoursSelection
     */
    shareFactor?: string;
}
/**
 *
 * @export
 * @interface TransactionV2ParamsUnspentTo
 */
export interface TransactionV2ParamsUnspentTo {
    /**
     *
     * @type {string}
     * @memberof TransactionV2ParamsUnspentTo
     */
    address?: string;
    /**
     *
     * @type {string}
     * @memberof TransactionV2ParamsUnspentTo
     */
    coins?: string;
}
/**
 *
 * @export
 * @interface TransactionVerbose
 */
export interface TransactionVerbose {
    /**
     *
     * @type {number}
     * @memberof TransactionVerbose
     */
    time?: number;
    /**
     *
     * @type {TransactionStatus}
     * @memberof TransactionVerbose
     */
    status?: TransactionStatus;
    /**
     *
     * @type {TransactionVerboseTxn}
     * @memberof TransactionVerbose
     */
    txn?: TransactionVerboseTxn;
}
/**
 * TransactionVerbose has readable transaction data. It adds TransactionStatus to a BlockTransactionVerbose
 * @export
 * @interface TransactionVerboseTxn
 */
export interface TransactionVerboseTxn {
    /**
     *
     * @type {TransactionStatus}
     * @memberof TransactionVerboseTxn
     */
    status?: TransactionStatus;
    /**
     *
     * @type {number}
     * @memberof TransactionVerboseTxn
     */
    fee?: number;
    /**
     *
     * @type {string}
     * @memberof TransactionVerboseTxn
     */
    innerHash?: string;
    /**
     *
     * @type {Array<TransactionVerboseTxnInputs>}
     * @memberof TransactionVerboseTxn
     */
    inputs?: Array<TransactionVerboseTxnInputs>;
    /**
     *
     * @type {number}
     * @memberof TransactionVerboseTxn
     */
    length?: number;
    /**
     *
     * @type {Array<any>}
     * @memberof TransactionVerboseTxn
     */
    outputs?: Array<any>;
    /**
     *
     * @type {Array<string>}
     * @memberof TransactionVerboseTxn
     */
    sigs?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof TransactionVerboseTxn
     */
    timestamp?: number;
    /**
     *
     * @type {string}
     * @memberof TransactionVerboseTxn
     */
    txid?: string;
    /**
     *
     * @type {number}
     * @memberof TransactionVerboseTxn
     */
    type?: number;
}
/**
 *
 * @export
 * @interface TransactionVerboseTxnInputs
 */
export interface TransactionVerboseTxnInputs {
    /**
     *
     * @type {string}
     * @memberof TransactionVerboseTxnInputs
     */
    uxid?: string;
    /**
     *
     * @type {string}
     * @memberof TransactionVerboseTxnInputs
     */
    owner?: string;
    /**
     *
     * @type {string}
     * @memberof TransactionVerboseTxnInputs
     */
    coins?: string;
    /**
     *
     * @type {number}
     * @memberof TransactionVerboseTxnInputs
     */
    hours?: number;
    /**
     *
     * @type {number}
     * @memberof TransactionVerboseTxnInputs
     */
    calculatedHours?: number;
}
/**
 *
 * @export
 * @interface TransactionVerifyRequest
 */
export interface TransactionVerifyRequest {
    /**
     *
     * @type {boolean}
     * @memberof TransactionVerifyRequest
     */
    unsigned?: boolean;
    /**
     *
     * @type {string}
     * @memberof TransactionVerifyRequest
     */
    encodedTransaction?: string;
}
/**
 *
 * @export
 * @interface WalletTransactionRequest
 */
export interface WalletTransactionRequest {
    /**
     *
     * @type {string}
     * @memberof WalletTransactionRequest
     */
    changeAddress?: string;
    /**
     *
     * @type {WalletTransactionRequestHoursSelection}
     * @memberof WalletTransactionRequest
     */
    hoursSelection?: WalletTransactionRequestHoursSelection;
    /**
     *
     * @type {boolean}
     * @memberof WalletTransactionRequest
     */
    ignoreUnconfirmed?: boolean;
    /**
     *
     * @type {Array<any>}
     * @memberof WalletTransactionRequest
     */
    to?: Array<any>;
    /**
     *
     * @type {WalletTransactionRequestWallet}
     * @memberof WalletTransactionRequest
     */
    wallet?: WalletTransactionRequestWallet;
}
/**
 *
 * @export
 * @interface WalletTransactionRequestHoursSelection
 */
export interface WalletTransactionRequestHoursSelection {
    /**
     *
     * @type {string}
     * @memberof WalletTransactionRequestHoursSelection
     */
    mode?: string;
    /**
     *
     * @type {string}
     * @memberof WalletTransactionRequestHoursSelection
     */
    shareFactor?: string;
    /**
     *
     * @type {string}
     * @memberof WalletTransactionRequestHoursSelection
     */
    type?: string;
}
/**
 *
 * @export
 * @interface WalletTransactionRequestWallet
 */
export interface WalletTransactionRequestWallet {
    /**
     *
     * @type {Array<string>}
     * @memberof WalletTransactionRequestWallet
     */
    addresses?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof WalletTransactionRequestWallet
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof WalletTransactionRequestWallet
     */
    password?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof WalletTransactionRequestWallet
     */
    unspents?: Array<string>;
}
/**
 *
 * @export
 * @interface WalletTransactionSignRequest
 */
export interface WalletTransactionSignRequest {
    /**
     *
     * @type {string}
     * @memberof WalletTransactionSignRequest
     */
    walletId?: string;
    /**
     *
     * @type {string}
     * @memberof WalletTransactionSignRequest
     */
    password?: string;
    /**
     *
     * @type {string}
     * @memberof WalletTransactionSignRequest
     */
    encodedTransaction?: string;
    /**
     *
     * @type {Array<number>}
     * @memberof WalletTransactionSignRequest
     */
    signIndexes?: Array<number>;
}
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export declare const DefaultApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Returns the total number of unique address that have coins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addressCount(options?: any): RequestArgs;
    /**
     * Returns the historical, spent outputs associated with an address
     * @param {string} address address to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addressUxouts(address: string, options?: any): RequestArgs;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RawtxGet(options?: any): RequestArgs;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2MetricsGet(options?: any): RequestArgs;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} addrs command separated list of addresses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    balanceGet(addrs: string, options?: any): RequestArgs;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} addrs command separated list of addresses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    balancePost(addrs: string, options?: any): RequestArgs;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} [hash] get block by hash
     * @param {number} [seq] get block by sequence number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    block(hash?: string, seq?: number, options?: any): RequestArgs;
    /**
     *
     * @summary Returns the blockchain metadata.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockchainMetadata(options?: any): RequestArgs;
    /**
     *
     * @summary Returns the blockchain sync progress.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockchainProgress(options?: any): RequestArgs;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {number} [start] start seq
     * @param {number} [end] end seq
     * @param {Array<number>} [seq] comma-separated list of block seqs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blocks(start?: number, end?: number, seq?: number[], options?: any): RequestArgs;
    /**
     * coinSupplyHandler returns coin distribution supply stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coinSupply(options?: any): RequestArgs;
    /**
     *
     * @summary Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    csrf(options?: any): RequestArgs;
    /**
     *
     * @param {string} [type] storage type.
     * @param {string} [key] key of the specific value to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataDELETE(type?: string, key?: string, options?: any): RequestArgs;
    /**
     *
     * @param {string} [type] storage type.
     * @param {string} [key] key of the specific value to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataGET(type?: string, key?: string, options?: any): RequestArgs;
    /**
     *
     * @param {string} [type] storage type.
     * @param {string} [key] key of the specific value to get.
     * @param {string} [val] additional value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataPOST(type?: string, key?: string, val?: string, options?: any): RequestArgs;
    /**
     *
     * @summary defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    defaultConnections(options?: any): RequestArgs;
    /**
     *
     * @summary Returns node health data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    health(options?: any): RequestArgs;
    /**
     * Returns the most recent N blocks on the blockchain
     * @param {number} num Num of blockss
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lastBlocks(num: number, options?: any): RequestArgs;
    /**
     *
     * @summary This endpoint returns a specific connection.
     * @param {string} addr Address port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnection(addr: string, options?: any): RequestArgs;
    /**
     *
     * @summary This endpoint returns all outgoings connections.
     * @param {'pending' | 'connected' | 'introduced'} [states] Connection status.
     * @param {'connected' | 'introduced'} [direction] Direction of the connection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnections(states?: "pending" | "connected" | "introduced", direction?: "connected" | "introduced", options?: any): RequestArgs;
    /**
     * This endpoint disconnects a connection by ID or address
     * @param {string} id Address id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnectionsDisconnect(id: string, options?: any): RequestArgs;
    /**
     * This endpoint returns all connections found through peer exchange
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnectionsExchange(options?: any): RequestArgs;
    /**
     *
     * @summary trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnectionsTrust(options?: any): RequestArgs;
    /**
     *
     * @summary If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     * @param {Array<string>} [address]
     * @param {Array<string>} [hash]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outputsGet(address?: string[], hash?: string[], options?: any): RequestArgs;
    /**
     *
     * @summary If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     * @param {string} [address]
     * @param {string} [hash]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outputsPost(address?: string, hash?: string, options?: any): RequestArgs;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pendingTxs(options?: any): RequestArgs;
    /**
     * Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendUnconfirmedTxns(options?: any): RequestArgs;
    /**
     *
     * @summary Returns the top skycoin holders.
     * @param {boolean} [includeDistribution] include distribution addresses or not, default value false
     * @param {string} [n] include distribution addresses or not, default value false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    richlist(includeDistribution?: boolean, n?: string, options?: any): RequestArgs;
    /**
     * Returns a transaction identified by its txid hash with just id
     * @param {string} txid transaction Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transaction(txid: string, options?: any): RequestArgs;
    /**
     *
     * @summary Broadcast a hex-encoded, serialized transaction to the network.
     * @param {string} rawtx hex-encoded serialized transaction string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionInject(rawtx: string, options?: any): RequestArgs;
    /**
     *
     * @param {TransactionV2ParamsAddress} [transactionV2ParamsAddress]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionPost(transactionV2ParamsAddress?: TransactionV2ParamsAddress, options?: any): RequestArgs;
    /**
     *
     * @param {TransactionV2ParamsUnspent} transactionV2ParamsUnspent Unspent parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionPostUnspent(transactionV2ParamsUnspent: TransactionV2ParamsUnspent, options?: any): RequestArgs;
    /**
     *
     * @summary Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed.
     * @param {string} [txid] Transaction id hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionRaw(txid?: string, options?: any): RequestArgs;
    /**
     * Decode and verify an encoded transaction
     * @param {TransactionVerifyRequest} transactionVerifyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionVerify(transactionVerifyRequest: TransactionVerifyRequest, options?: any): RequestArgs;
    /**
     *
     * @summary Returns transactions that match the filters.
     * @param {string} [addrs] command separated list of addresses
     * @param {string} [confirmed] Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsGet(addrs?: string, confirmed?: string, options?: any): RequestArgs;
    /**
     *
     * @summary Returns transactions that match the filters.
     * @param {string} [addrs] command separated list of addresses
     * @param {string} [confirmed] Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsPost(addrs?: string, confirmed?: string, options?: any): RequestArgs;
    /**
     *
     * @summary Returns an unspent output by ID.
     * @param {string} [uxid] uxid to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uxout(uxid?: string, options?: any): RequestArgs;
    /**
     *
     * @summary Verifies a Skycoin address.
     * @param {any} address Address id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyAddress(address: any, options?: any): RequestArgs;
    /**
     * versionHandler returns the application version info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    version(options?: any): RequestArgs;
    /**
     *
     * @summary Returns a wallet by id.
     * @param {string} id tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wallet(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Returns the wallet's balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} id tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletBalance(id: string, options?: any): RequestArgs;
    /**
     * Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
     * @param {string} seed Wallet seed.
     * @param {string} label Wallet label.
     * @param {number} [scan] The number of addresses to scan ahead for balances.
     * @param {boolean} [encrypt] Encrypt wallet.
     * @param {string} [password] Wallet Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletCreate(seed: string, label: string, scan?: number, encrypt?: boolean, password?: string, options?: any): RequestArgs;
    /**
     *
     * @summary Decrypts wallet.
     * @param {string} id Wallet id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletDecrypt(id: string, password: string, options?: any): RequestArgs;
    /**
     *
     * @summary Encrypt wallet.
     * @param {string} id Wallet id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletEncrypt(id: string, password: string, options?: any): RequestArgs;
    /**
     * Returns the wallet directory path
     * @param {string} addr Address port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletFolder(addr: string, options?: any): RequestArgs;
    /**
     * Generates new addresses
     * @param {string} id Wallet Id
     * @param {string} [num] The number you want to generate
     * @param {string} [password] Wallet Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletNewAddress(id: string, num?: string, password?: string, options?: any): RequestArgs;
    /**
     * Returns the wallet directory path
     * @param {'128' | '256'} [entropy] Entropy bitSize.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletNewSeed(entropy?: "128" | "256", options?: any): RequestArgs;
    /**
     *
     * @summary Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
     * @param {string} id Wallet id.
     * @param {string} seed Wallet seed.
     * @param {string} [password] Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletRecover(id: string, seed: string, password?: string, options?: any): RequestArgs;
    /**
     *
     * @summary This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
     * @param {string} id Wallet Id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletSeed(id: string, password: string, options?: any): RequestArgs;
    /**
     *
     * @summary Verifies a wallet seed.
     * @param {string} [seed] Seed to be verified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletSeedVerify(seed?: string, options?: any): RequestArgs;
    /**
     *
     * @summary Creates a signed transaction
     * @param {WalletTransactionRequest} walletTransactionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletTransaction(walletTransactionRequest: WalletTransactionRequest, options?: any): RequestArgs;
    /**
     *
     * @summary Creates a signed transaction
     * @param {WalletTransactionSignRequest} walletTransactionSignRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletTransactionSign(walletTransactionSignRequest: WalletTransactionSignRequest, options?: any): RequestArgs;
    /**
     *
     * @param {string} id Wallet Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletTransactions(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Unloads wallet from the wallet service.
     * @param {string} id Wallet Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletUnload(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Update the wallet.
     * @param {string} id Wallet Id.
     * @param {string} label The label the wallet will be updated to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletUpdate(id: string, label: string, options?: any): RequestArgs;
    /**
     * Returns all loaded wallets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wallets(options?: any): RequestArgs;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Returns the total number of unique address that have coins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addressCount(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>;
    /**
     * Returns the historical, spent outputs associated with an address
     * @param {string} address address to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addressUxouts(address: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any[]>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RawtxGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2MetricsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} addrs command separated list of addresses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    balanceGet(addrs: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} addrs command separated list of addresses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    balancePost(addrs: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} [hash] get block by hash
     * @param {number} [seq] get block by sequence number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    block(hash?: string, seq?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlockSchema[]>;
    /**
     *
     * @summary Returns the blockchain metadata.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockchainMetadata(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Returns the blockchain sync progress.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockchainProgress(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {number} [start] start seq
     * @param {number} [end] end seq
     * @param {Array<number>} [seq] comma-separated list of block seqs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blocks(start?: number, end?: number, seq?: number[], options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>;
    /**
     * coinSupplyHandler returns coin distribution supply stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coinSupply(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>;
    /**
     *
     * @summary Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    csrf(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>;
    /**
     *
     * @param {string} [type] storage type.
     * @param {string} [key] key of the specific value to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataDELETE(type?: string, key?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     *
     * @param {string} [type] storage type.
     * @param {string} [key] key of the specific value to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataGET(type?: string, key?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @param {string} [type] storage type.
     * @param {string} [key] key of the specific value to get.
     * @param {string} [val] additional value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataPOST(type?: string, key?: string, val?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     *
     * @summary defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    defaultConnections(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     *
     * @summary Returns node health data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    health(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * Returns the most recent N blocks on the blockchain
     * @param {number} num Num of blockss
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lastBlocks(num: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary This endpoint returns a specific connection.
     * @param {string} addr Address port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnection(addr: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkConnectionSchema>;
    /**
     *
     * @summary This endpoint returns all outgoings connections.
     * @param {'pending' | 'connected' | 'introduced'} [states] Connection status.
     * @param {'connected' | 'introduced'} [direction] Direction of the connection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnections(states?: "pending" | "connected" | "introduced", direction?: "connected" | "introduced", options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>;
    /**
     * This endpoint disconnects a connection by ID or address
     * @param {string} id Address id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnectionsDisconnect(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * This endpoint returns all connections found through peer exchange
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnectionsExchange(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     *
     * @summary trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnectionsTrust(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     *
     * @summary If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     * @param {Array<string>} [address]
     * @param {Array<string>} [hash]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outputsGet(address?: string[], hash?: string[], options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     * @param {string} [address]
     * @param {string} [hash]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outputsPost(address?: string, hash?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pendingTxs(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20010[]>;
    /**
     * Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendUnconfirmedTxns(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Returns the top skycoin holders.
     * @param {boolean} [includeDistribution] include distribution addresses or not, default value false
     * @param {string} [n] include distribution addresses or not, default value false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    richlist(includeDistribution?: boolean, n?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * Returns a transaction identified by its txid hash with just id
     * @param {string} txid transaction Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transaction(txid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>;
    /**
     *
     * @summary Broadcast a hex-encoded, serialized transaction to the network.
     * @param {string} rawtx hex-encoded serialized transaction string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionInject(rawtx: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>;
    /**
     *
     * @param {TransactionV2ParamsAddress} [transactionV2ParamsAddress]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionPost(transactionV2ParamsAddress?: TransactionV2ParamsAddress, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>;
    /**
     *
     * @param {TransactionV2ParamsUnspent} transactionV2ParamsUnspent Unspent parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionPostUnspent(transactionV2ParamsUnspent: TransactionV2ParamsUnspent, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>;
    /**
     *
     * @summary Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed.
     * @param {string} [txid] Transaction id hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionRaw(txid?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * Decode and verify an encoded transaction
     * @param {TransactionVerifyRequest} transactionVerifyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionVerify(transactionVerifyRequest: TransactionVerifyRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Returns transactions that match the filters.
     * @param {string} [addrs] command separated list of addresses
     * @param {string} [confirmed] Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsGet(addrs?: string, confirmed?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Returns transactions that match the filters.
     * @param {string} [addrs] command separated list of addresses
     * @param {string} [confirmed] Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsPost(addrs?: string, confirmed?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Returns an unspent output by ID.
     * @param {string} [uxid] uxid to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uxout(uxid?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Verifies a Skycoin address.
     * @param {any} address Address id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyAddress(address: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * versionHandler returns the application version info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    version(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>;
    /**
     *
     * @summary Returns a wallet by id.
     * @param {string} id tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wallet(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Returns the wallet's balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} id tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletBalance(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
     * @param {string} seed Wallet seed.
     * @param {string} label Wallet label.
     * @param {number} [scan] The number of addresses to scan ahead for balances.
     * @param {boolean} [encrypt] Encrypt wallet.
     * @param {string} [password] Wallet Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletCreate(seed: string, label: string, scan?: number, encrypt?: boolean, password?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Decrypts wallet.
     * @param {string} id Wallet id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletDecrypt(id: string, password: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Encrypt wallet.
     * @param {string} id Wallet id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletEncrypt(id: string, password: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * Returns the wallet directory path
     * @param {string} addr Address port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletFolder(addr: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>;
    /**
     * Generates new addresses
     * @param {string} id Wallet Id
     * @param {string} [num] The number you want to generate
     * @param {string} [password] Wallet Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletNewAddress(id: string, num?: string, password?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * Returns the wallet directory path
     * @param {'128' | '256'} [entropy] Entropy bitSize.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletNewSeed(entropy?: "128" | "256", options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
     * @param {string} id Wallet id.
     * @param {string} seed Wallet seed.
     * @param {string} [password] Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletRecover(id: string, seed: string, password?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
     * @param {string} id Wallet Id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletSeed(id: string, password: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Verifies a wallet seed.
     * @param {string} [seed] Seed to be verified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletSeedVerify(seed?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Creates a signed transaction
     * @param {WalletTransactionRequest} walletTransactionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletTransaction(walletTransactionRequest: WalletTransactionRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Creates a signed transaction
     * @param {WalletTransactionSignRequest} walletTransactionSignRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletTransactionSign(walletTransactionSignRequest: WalletTransactionSignRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009>;
    /**
     *
     * @param {string} id Wallet Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletTransactions(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>;
    /**
     *
     * @summary Unloads wallet from the wallet service.
     * @param {string} id Wallet Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletUnload(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     *
     * @summary Update the wallet.
     * @param {string} id Wallet Id.
     * @param {string} label The label the wallet will be updated to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletUpdate(id: string, label: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>;
    /**
     * Returns all loaded wallets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wallets(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any[]>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Returns the total number of unique address that have coins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addressCount(options?: any): AxiosPromise<InlineResponse200>;
    /**
     * Returns the historical, spent outputs associated with an address
     * @param {string} address address to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addressUxouts(address: string, options?: any): AxiosPromise<any[]>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RawtxGet(options?: any): AxiosPromise<string>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2MetricsGet(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} addrs command separated list of addresses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    balanceGet(addrs: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} addrs command separated list of addresses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    balancePost(addrs: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} [hash] get block by hash
     * @param {number} [seq] get block by sequence number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    block(hash?: string, seq?: number, options?: any): AxiosPromise<BlockSchema[]>;
    /**
     *
     * @summary Returns the blockchain metadata.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockchainMetadata(options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the blockchain sync progress.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockchainProgress(options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {number} [start] start seq
     * @param {number} [end] end seq
     * @param {Array<number>} [seq] comma-separated list of block seqs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blocks(start?: number, end?: number, seq?: number[], options?: any): AxiosPromise<InlineResponse2001>;
    /**
     * coinSupplyHandler returns coin distribution supply stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    coinSupply(options?: any): AxiosPromise<InlineResponse2002>;
    /**
     *
     * @summary Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    csrf(options?: any): AxiosPromise<InlineResponse2003>;
    /**
     *
     * @param {string} [type] storage type.
     * @param {string} [key] key of the specific value to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataDELETE(type?: string, key?: string, options?: any): AxiosPromise<Response>;
    /**
     *
     * @param {string} [type] storage type.
     * @param {string} [key] key of the specific value to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataGET(type?: string, key?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @param {string} [type] storage type.
     * @param {string} [key] key of the specific value to get.
     * @param {string} [val] additional value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataPOST(type?: string, key?: string, val?: string, options?: any): AxiosPromise<Response>;
    /**
     *
     * @summary defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    defaultConnections(options?: any): AxiosPromise<string[]>;
    /**
     *
     * @summary Returns node health data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    health(options?: any): AxiosPromise<any>;
    /**
     * Returns the most recent N blocks on the blockchain
     * @param {number} num Num of blockss
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lastBlocks(num: number, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary This endpoint returns a specific connection.
     * @param {string} addr Address port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnection(addr: string, options?: any): AxiosPromise<NetworkConnectionSchema>;
    /**
     *
     * @summary This endpoint returns all outgoings connections.
     * @param {'pending' | 'connected' | 'introduced'} [states] Connection status.
     * @param {'connected' | 'introduced'} [direction] Direction of the connection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnections(states?: "pending" | "connected" | "introduced", direction?: "connected" | "introduced", options?: any): AxiosPromise<InlineResponse2004>;
    /**
     * This endpoint disconnects a connection by ID or address
     * @param {string} id Address id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnectionsDisconnect(id: string, options?: any): AxiosPromise<Response>;
    /**
     * This endpoint returns all connections found through peer exchange
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnectionsExchange(options?: any): AxiosPromise<string[]>;
    /**
     *
     * @summary trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    networkConnectionsTrust(options?: any): AxiosPromise<string[]>;
    /**
     *
     * @summary If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     * @param {Array<string>} [address]
     * @param {Array<string>} [hash]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outputsGet(address?: string[], hash?: string[], options?: any): AxiosPromise<any>;
    /**
     *
     * @summary If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     * @param {string} [address]
     * @param {string} [hash]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    outputsPost(address?: string, hash?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pendingTxs(options?: any): AxiosPromise<InlineResponse20010[]>;
    /**
     * Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendUnconfirmedTxns(options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the top skycoin holders.
     * @param {boolean} [includeDistribution] include distribution addresses or not, default value false
     * @param {string} [n] include distribution addresses or not, default value false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    richlist(includeDistribution?: boolean, n?: string, options?: any): AxiosPromise<any>;
    /**
     * Returns a transaction identified by its txid hash with just id
     * @param {string} txid transaction Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transaction(txid: string, options?: any): AxiosPromise<Transaction>;
    /**
     *
     * @summary Broadcast a hex-encoded, serialized transaction to the network.
     * @param {string} rawtx hex-encoded serialized transaction string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionInject(rawtx: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @param {TransactionV2ParamsAddress} [transactionV2ParamsAddress]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionPost(transactionV2ParamsAddress?: TransactionV2ParamsAddress, options?: any): AxiosPromise<InlineResponse2008>;
    /**
     *
     * @param {TransactionV2ParamsUnspent} transactionV2ParamsUnspent Unspent parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionPostUnspent(transactionV2ParamsUnspent: TransactionV2ParamsUnspent, options?: any): AxiosPromise<InlineResponse2008>;
    /**
     *
     * @summary Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed.
     * @param {string} [txid] Transaction id hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionRaw(txid?: string, options?: any): AxiosPromise<any>;
    /**
     * Decode and verify an encoded transaction
     * @param {TransactionVerifyRequest} transactionVerifyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionVerify(transactionVerifyRequest: TransactionVerifyRequest, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns transactions that match the filters.
     * @param {string} [addrs] command separated list of addresses
     * @param {string} [confirmed] Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsGet(addrs?: string, confirmed?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns transactions that match the filters.
     * @param {string} [addrs] command separated list of addresses
     * @param {string} [confirmed] Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsPost(addrs?: string, confirmed?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns an unspent output by ID.
     * @param {string} [uxid] uxid to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uxout(uxid?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Verifies a Skycoin address.
     * @param {any} address Address id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyAddress(address: any, options?: any): AxiosPromise<any>;
    /**
     * versionHandler returns the application version info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    version(options?: any): AxiosPromise<InlineResponse2005>;
    /**
     *
     * @summary Returns a wallet by id.
     * @param {string} id tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wallet(id: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the wallet's balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} id tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletBalance(id: string, options?: any): AxiosPromise<any>;
    /**
     * Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
     * @param {string} seed Wallet seed.
     * @param {string} label Wallet label.
     * @param {number} [scan] The number of addresses to scan ahead for balances.
     * @param {boolean} [encrypt] Encrypt wallet.
     * @param {string} [password] Wallet Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletCreate(seed: string, label: string, scan?: number, encrypt?: boolean, password?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Decrypts wallet.
     * @param {string} id Wallet id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletDecrypt(id: string, password: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Encrypt wallet.
     * @param {string} id Wallet id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletEncrypt(id: string, password: string, options?: any): AxiosPromise<any>;
    /**
     * Returns the wallet directory path
     * @param {string} addr Address port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletFolder(addr: string, options?: any): AxiosPromise<InlineResponse2007>;
    /**
     * Generates new addresses
     * @param {string} id Wallet Id
     * @param {string} [num] The number you want to generate
     * @param {string} [password] Wallet Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletNewAddress(id: string, num?: string, password?: string, options?: any): AxiosPromise<any>;
    /**
     * Returns the wallet directory path
     * @param {'128' | '256'} [entropy] Entropy bitSize.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletNewSeed(entropy?: "128" | "256", options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
     * @param {string} id Wallet id.
     * @param {string} seed Wallet seed.
     * @param {string} [password] Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletRecover(id: string, seed: string, password?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
     * @param {string} id Wallet Id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletSeed(id: string, password: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Verifies a wallet seed.
     * @param {string} [seed] Seed to be verified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletSeedVerify(seed?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Creates a signed transaction
     * @param {WalletTransactionRequest} walletTransactionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletTransaction(walletTransactionRequest: WalletTransactionRequest, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Creates a signed transaction
     * @param {WalletTransactionSignRequest} walletTransactionSignRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletTransactionSign(walletTransactionSignRequest: WalletTransactionSignRequest, options?: any): AxiosPromise<InlineResponse2009>;
    /**
     *
     * @param {string} id Wallet Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletTransactions(id: string, options?: any): AxiosPromise<InlineResponse2006>;
    /**
     *
     * @summary Unloads wallet from the wallet service.
     * @param {string} id Wallet Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletUnload(id: string, options?: any): AxiosPromise<Response>;
    /**
     *
     * @summary Update the wallet.
     * @param {string} id Wallet Id.
     * @param {string} label The label the wallet will be updated to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletUpdate(id: string, label: string, options?: any): AxiosPromise<string>;
    /**
     * Returns all loaded wallets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wallets(options?: any): AxiosPromise<any[]>;
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI {
    /**
     *
     * @summary Returns the total number of unique address that have coins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    addressCount(options?: any): AxiosPromise<InlineResponse200>;
    /**
     * Returns the historical, spent outputs associated with an address
     * @param {string} address address to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    addressUxouts(address: string, options?: any): AxiosPromise<any[]>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    apiV1RawtxGet(options?: any): AxiosPromise<string>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    apiV2MetricsGet(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} addrs command separated list of addresses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    balanceGet(addrs: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} addrs command separated list of addresses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    balancePost(addrs: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} [hash] get block by hash
     * @param {number} [seq] get block by sequence number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    block(hash?: string, seq?: number, options?: any): AxiosPromise<BlockSchema[]>;
    /**
     *
     * @summary Returns the blockchain metadata.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    blockchainMetadata(options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the blockchain sync progress.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    blockchainProgress(options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
     * @param {number} [start] start seq
     * @param {number} [end] end seq
     * @param {Array<number>} [seq] comma-separated list of block seqs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    blocks(start?: number, end?: number, seq?: Array<number>, options?: any): AxiosPromise<InlineResponse2001>;
    /**
     * coinSupplyHandler returns coin distribution supply stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    coinSupply(options?: any): AxiosPromise<InlineResponse2002>;
    /**
     *
     * @summary Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    csrf(options?: any): AxiosPromise<InlineResponse2003>;
    /**
     *
     * @param {string} [type] storage type.
     * @param {string} [key] key of the specific value to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    dataDELETE(type?: string, key?: string, options?: any): AxiosPromise<Response>;
    /**
     *
     * @param {string} [type] storage type.
     * @param {string} [key] key of the specific value to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    dataGET(type?: string, key?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @param {string} [type] storage type.
     * @param {string} [key] key of the specific value to get.
     * @param {string} [val] additional value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    dataPOST(type?: string, key?: string, val?: string, options?: any): AxiosPromise<Response>;
    /**
     *
     * @summary defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    defaultConnections(options?: any): AxiosPromise<string[]>;
    /**
     *
     * @summary Returns node health data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    health(options?: any): AxiosPromise<any>;
    /**
     * Returns the most recent N blocks on the blockchain
     * @param {number} num Num of blockss
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    lastBlocks(num: number, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary This endpoint returns a specific connection.
     * @param {string} addr Address port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    networkConnection(addr: string, options?: any): AxiosPromise<NetworkConnectionSchema>;
    /**
     *
     * @summary This endpoint returns all outgoings connections.
     * @param {'pending' | 'connected' | 'introduced'} [states] Connection status.
     * @param {'connected' | 'introduced'} [direction] Direction of the connection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    networkConnections(states?: 'pending' | 'connected' | 'introduced', direction?: 'connected' | 'introduced', options?: any): AxiosPromise<InlineResponse2004>;
    /**
     * This endpoint disconnects a connection by ID or address
     * @param {string} id Address id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    networkConnectionsDisconnect(id: string, options?: any): AxiosPromise<Response>;
    /**
     * This endpoint returns all connections found through peer exchange
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    networkConnectionsExchange(options?: any): AxiosPromise<string[]>;
    /**
     *
     * @summary trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    networkConnectionsTrust(options?: any): AxiosPromise<string[]>;
    /**
     *
     * @summary If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     * @param {Array<string>} [address]
     * @param {Array<string>} [hash]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    outputsGet(address?: Array<string>, hash?: Array<string>, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
     * @param {string} [address]
     * @param {string} [hash]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    outputsPost(address?: string, hash?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    pendingTxs(options?: any): AxiosPromise<InlineResponse20010[]>;
    /**
     * Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    resendUnconfirmedTxns(options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the top skycoin holders.
     * @param {boolean} [includeDistribution] include distribution addresses or not, default value false
     * @param {string} [n] include distribution addresses or not, default value false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    richlist(includeDistribution?: boolean, n?: string, options?: any): AxiosPromise<any>;
    /**
     * Returns a transaction identified by its txid hash with just id
     * @param {string} txid transaction Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    transaction(txid: string, options?: any): AxiosPromise<Transaction>;
    /**
     *
     * @summary Broadcast a hex-encoded, serialized transaction to the network.
     * @param {string} rawtx hex-encoded serialized transaction string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    transactionInject(rawtx: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @param {TransactionV2ParamsAddress} [transactionV2ParamsAddress]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    transactionPost(transactionV2ParamsAddress?: TransactionV2ParamsAddress, options?: any): AxiosPromise<InlineResponse2008>;
    /**
     *
     * @param {TransactionV2ParamsUnspent} transactionV2ParamsUnspent Unspent parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    transactionPostUnspent(transactionV2ParamsUnspent: TransactionV2ParamsUnspent, options?: any): AxiosPromise<InlineResponse2008>;
    /**
     *
     * @summary Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed.
     * @param {string} [txid] Transaction id hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    transactionRaw(txid?: string, options?: any): AxiosPromise<any>;
    /**
     * Decode and verify an encoded transaction
     * @param {TransactionVerifyRequest} transactionVerifyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    transactionVerify(transactionVerifyRequest: TransactionVerifyRequest, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns transactions that match the filters.
     * @param {string} [addrs] command separated list of addresses
     * @param {string} [confirmed] Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    transactionsGet(addrs?: string, confirmed?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns transactions that match the filters.
     * @param {string} [addrs] command separated list of addresses
     * @param {string} [confirmed] Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    transactionsPost(addrs?: string, confirmed?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns an unspent output by ID.
     * @param {string} [uxid] uxid to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    uxout(uxid?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Verifies a Skycoin address.
     * @param {any} address Address id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    verifyAddress(address: any, options?: any): AxiosPromise<any>;
    /**
     * versionHandler returns the application version info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    version(options?: any): AxiosPromise<InlineResponse2005>;
    /**
     *
     * @summary Returns a wallet by id.
     * @param {string} id tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    wallet(id: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the wallet's balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
     * @param {string} id tags to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletBalance(id: string, options?: any): AxiosPromise<any>;
    /**
     * Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
     * @param {string} seed Wallet seed.
     * @param {string} label Wallet label.
     * @param {number} [scan] The number of addresses to scan ahead for balances.
     * @param {boolean} [encrypt] Encrypt wallet.
     * @param {string} [password] Wallet Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletCreate(seed: string, label: string, scan?: number, encrypt?: boolean, password?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Decrypts wallet.
     * @param {string} id Wallet id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletDecrypt(id: string, password: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Encrypt wallet.
     * @param {string} id Wallet id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletEncrypt(id: string, password: string, options?: any): AxiosPromise<any>;
    /**
     * Returns the wallet directory path
     * @param {string} addr Address port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletFolder(addr: string, options?: any): AxiosPromise<InlineResponse2007>;
    /**
     * Generates new addresses
     * @param {string} id Wallet Id
     * @param {string} [num] The number you want to generate
     * @param {string} [password] Wallet Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletNewAddress(id: string, num?: string, password?: string, options?: any): AxiosPromise<any>;
    /**
     * Returns the wallet directory path
     * @param {'128' | '256'} [entropy] Entropy bitSize.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletNewSeed(entropy?: '128' | '256', options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
     * @param {string} id Wallet id.
     * @param {string} seed Wallet seed.
     * @param {string} [password] Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletRecover(id: string, seed: string, password?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
     * @param {string} id Wallet Id.
     * @param {string} password Wallet password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletSeed(id: string, password: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Verifies a wallet seed.
     * @param {string} [seed] Seed to be verified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletSeedVerify(seed?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Creates a signed transaction
     * @param {WalletTransactionRequest} walletTransactionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletTransaction(walletTransactionRequest: WalletTransactionRequest, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Creates a signed transaction
     * @param {WalletTransactionSignRequest} walletTransactionSignRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletTransactionSign(walletTransactionSignRequest: WalletTransactionSignRequest, options?: any): AxiosPromise<InlineResponse2009>;
    /**
     *
     * @param {string} id Wallet Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletTransactions(id: string, options?: any): AxiosPromise<InlineResponse2006>;
    /**
     *
     * @summary Unloads wallet from the wallet service.
     * @param {string} id Wallet Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletUnload(id: string, options?: any): AxiosPromise<Response>;
    /**
     *
     * @summary Update the wallet.
     * @param {string} id Wallet Id.
     * @param {string} label The label the wallet will be updated to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    walletUpdate(id: string, label: string, options?: any): AxiosPromise<string>;
    /**
     * Returns all loaded wallets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    wallets(options?: any): AxiosPromise<any[]>;
}
