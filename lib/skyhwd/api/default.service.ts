/**
 * Hardware Wallet Daemon API
 * This is the hardware-wallet-daemon API
 *
 * OpenAPI spec version: 0.1.0
 * Contact: steve@skycoin.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ApplySettingsRequest } from '../model/applySettingsRequest';
import { CSRFResponse } from '../model/cSRFResponse';
import { CheckMessageSignatureRequest } from '../model/checkMessageSignatureRequest';
import { FeaturesResponse } from '../model/featuresResponse';
import { GenerateAddressesRequest } from '../model/generateAddressesRequest';
import { GenerateAddressesResponse } from '../model/generateAddressesResponse';
import { GenerateMnemonicRequest } from '../model/generateMnemonicRequest';
import { HTTPErrorResponse } from '../model/hTTPErrorResponse';
import { HTTPSuccessResponse } from '../model/hTTPSuccessResponse';
import { InlineResponse200 } from '../model/inlineResponse200';
import { PassphraseRequest } from '../model/passphraseRequest';
import { PinMatrixRequest } from '../model/pinMatrixRequest';
import { RecoveryRequest } from '../model/recoveryRequest';
import { SetMnemonicRequest } from '../model/setMnemonicRequest';
import { SignMessageRequest } from '../model/signMessageRequest';
import { SignMessageResponse } from '../model/signMessageResponse';
import { TransactionSignRequest } from '../model/transactionSignRequest';
import { TransactionSignResponse } from '../model/transactionSignResponse';
import { WordRequest } from '../model/wordRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DefaultService {

    protected basePath = 'http://127.0.0.1:9510/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Apply hardware wallet settings.
     * @param applySettingsRequest ApplySettingsRequest is request data for /api/v1/apply_settings
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public applySettingsPost(applySettingsRequest?: ApplySettingsRequest, observe?: 'body', reportProgress?: boolean): Observable<HTTPSuccessResponse>;
    public applySettingsPost(applySettingsRequest?: ApplySettingsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HTTPSuccessResponse>>;
    public applySettingsPost(applySettingsRequest?: ApplySettingsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HTTPSuccessResponse>>;
    public applySettingsPost(applySettingsRequest?: ApplySettingsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (csrfAuth) required
        if (this.configuration.apiKeys["X-CSRF-TOKEN"]) {
            headers = headers.set('X-CSRF-TOKEN', this.configuration.apiKeys["X-CSRF-TOKEN"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<HTTPSuccessResponse>(`${this.configuration.basePath}/apply_settings`,
            applySettingsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Start seed backup procedure.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public backupPost(observe?: 'body', reportProgress?: boolean): Observable<HTTPSuccessResponse>;
    public backupPost(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HTTPSuccessResponse>>;
    public backupPost(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HTTPSuccessResponse>>;
    public backupPost(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (csrfAuth) required
        if (this.configuration.apiKeys["X-CSRF-TOKEN"]) {
            headers = headers.set('X-CSRF-TOKEN', this.configuration.apiKeys["X-CSRF-TOKEN"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<HTTPSuccessResponse>(`${this.configuration.basePath}/backup`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Cancels the current operation.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cancelPut(observe?: 'body', reportProgress?: boolean): Observable<HTTPSuccessResponse>;
    public cancelPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HTTPSuccessResponse>>;
    public cancelPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HTTPSuccessResponse>>;
    public cancelPut(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (csrfAuth) required
        if (this.configuration.apiKeys["X-CSRF-TOKEN"]) {
            headers = headers.set('X-CSRF-TOKEN', this.configuration.apiKeys["X-CSRF-TOKEN"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<HTTPSuccessResponse>(`${this.configuration.basePath}/cancel`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Check a message signature matches the given address.
     * @param checkMessageSignatureRequest CheckMessageSignatureRequest is request data for /api/v1/check_message_signature
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public checkMessageSignaturePost(checkMessageSignatureRequest?: CheckMessageSignatureRequest, observe?: 'body', reportProgress?: boolean): Observable<HTTPSuccessResponse>;
    public checkMessageSignaturePost(checkMessageSignatureRequest?: CheckMessageSignatureRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HTTPSuccessResponse>>;
    public checkMessageSignaturePost(checkMessageSignatureRequest?: CheckMessageSignatureRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HTTPSuccessResponse>>;
    public checkMessageSignaturePost(checkMessageSignatureRequest?: CheckMessageSignatureRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (csrfAuth) required
        if (this.configuration.apiKeys["X-CSRF-TOKEN"]) {
            headers = headers.set('X-CSRF-TOKEN', this.configuration.apiKeys["X-CSRF-TOKEN"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<HTTPSuccessResponse>(`${this.configuration.basePath}/check_message_signature`,
            checkMessageSignatureRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * check whether device is connected or not.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public connectedGet(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;
    public connectedGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;
    public connectedGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;
    public connectedGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (csrfAuth) required
        if (this.configuration.apiKeys["X-CSRF-TOKEN"]) {
            headers = headers.set('X-CSRF-TOKEN', this.configuration.apiKeys["X-CSRF-TOKEN"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InlineResponse200>(`${this.configuration.basePath}/connected`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns csrf token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public csrfGet(observe?: 'body', reportProgress?: boolean): Observable<CSRFResponse>;
    public csrfGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CSRFResponse>>;
    public csrfGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CSRFResponse>>;
    public csrfGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CSRFResponse>(`${this.configuration.basePath}/csrf`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns device information.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public featuresGet(observe?: 'body', reportProgress?: boolean): Observable<FeaturesResponse>;
    public featuresGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FeaturesResponse>>;
    public featuresGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FeaturesResponse>>;
    public featuresGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (csrfAuth) required
        if (this.configuration.apiKeys["X-CSRF-TOKEN"]) {
            headers = headers.set('X-CSRF-TOKEN', this.configuration.apiKeys["X-CSRF-TOKEN"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<FeaturesResponse>(`${this.configuration.basePath}/features`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Update firmware
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public firmwareUpdatePut(observe?: 'body', reportProgress?: boolean): Observable<HTTPSuccessResponse>;
    public firmwareUpdatePut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HTTPSuccessResponse>>;
    public firmwareUpdatePut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HTTPSuccessResponse>>;
    public firmwareUpdatePut(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (csrfAuth) required
        if (this.configuration.apiKeys["X-CSRF-TOKEN"]) {
            headers = headers.set('X-CSRF-TOKEN', this.configuration.apiKeys["X-CSRF-TOKEN"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<HTTPSuccessResponse>(`${this.configuration.basePath}/firmware_update`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Generate addresses for the hardware wallet seed.
     * @param generateAddressesRequest GenerateAddressesRequest is request data for /api/v1/generate_addresses
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public generateAddressesPost(generateAddressesRequest?: GenerateAddressesRequest, observe?: 'body', reportProgress?: boolean): Observable<GenerateAddressesResponse>;
    public generateAddressesPost(generateAddressesRequest?: GenerateAddressesRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenerateAddressesResponse>>;
    public generateAddressesPost(generateAddressesRequest?: GenerateAddressesRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenerateAddressesResponse>>;
    public generateAddressesPost(generateAddressesRequest?: GenerateAddressesRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (csrfAuth) required
        if (this.configuration.apiKeys["X-CSRF-TOKEN"]) {
            headers = headers.set('X-CSRF-TOKEN', this.configuration.apiKeys["X-CSRF-TOKEN"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<GenerateAddressesResponse>(`${this.configuration.basePath}/generate_addresses`,
            generateAddressesRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Generate mnemonic can be used to initialize the device with a random seed.
     * @param generateMnemonicRequest GenerateMnemonicRequest is request data for /api/v1/generate_mnemonic
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public generateMnemonicPost(generateMnemonicRequest?: GenerateMnemonicRequest, observe?: 'body', reportProgress?: boolean): Observable<HTTPSuccessResponse>;
    public generateMnemonicPost(generateMnemonicRequest?: GenerateMnemonicRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HTTPSuccessResponse>>;
    public generateMnemonicPost(generateMnemonicRequest?: GenerateMnemonicRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HTTPSuccessResponse>>;
    public generateMnemonicPost(generateMnemonicRequest?: GenerateMnemonicRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (csrfAuth) required
        if (this.configuration.apiKeys["X-CSRF-TOKEN"]) {
            headers = headers.set('X-CSRF-TOKEN', this.configuration.apiKeys["X-CSRF-TOKEN"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<HTTPSuccessResponse>(`${this.configuration.basePath}/generate_mnemonic`,
            generateMnemonicRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * passphrase ack request.
     * @param passphraseRequest PassPhraseRequest is request data for /api/v1/intermediate/passphrase
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public intermediatePassphrasePost(passphraseRequest?: PassphraseRequest, observe?: 'body', reportProgress?: boolean): Observable<HTTPSuccessResponse>;
    public intermediatePassphrasePost(passphraseRequest?: PassphraseRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HTTPSuccessResponse>>;
    public intermediatePassphrasePost(passphraseRequest?: PassphraseRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HTTPSuccessResponse>>;
    public intermediatePassphrasePost(passphraseRequest?: PassphraseRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (csrfAuth) required
        if (this.configuration.apiKeys["X-CSRF-TOKEN"]) {
            headers = headers.set('X-CSRF-TOKEN', this.configuration.apiKeys["X-CSRF-TOKEN"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<HTTPSuccessResponse>(`${this.configuration.basePath}/intermediate/passphrase`,
            passphraseRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * pin matrix ack request.
     * @param pinMatrixRequest PinMatrixRequest is request data for /api/v1/intermediate/pin_matrix
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public intermediatePinMatrixPost(pinMatrixRequest?: PinMatrixRequest, observe?: 'body', reportProgress?: boolean): Observable<HTTPSuccessResponse>;
    public intermediatePinMatrixPost(pinMatrixRequest?: PinMatrixRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HTTPSuccessResponse>>;
    public intermediatePinMatrixPost(pinMatrixRequest?: PinMatrixRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HTTPSuccessResponse>>;
    public intermediatePinMatrixPost(pinMatrixRequest?: PinMatrixRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (csrfAuth) required
        if (this.configuration.apiKeys["X-CSRF-TOKEN"]) {
            headers = headers.set('X-CSRF-TOKEN', this.configuration.apiKeys["X-CSRF-TOKEN"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<HTTPSuccessResponse>(`${this.configuration.basePath}/intermediate/pin_matrix`,
            pinMatrixRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * word ack request.
     * @param wordRequest WordRequest is request data for /api/v1/intermediate/word
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public intermediateWordPost(wordRequest?: WordRequest, observe?: 'body', reportProgress?: boolean): Observable<HTTPSuccessResponse>;
    public intermediateWordPost(wordRequest?: WordRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HTTPSuccessResponse>>;
    public intermediateWordPost(wordRequest?: WordRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HTTPSuccessResponse>>;
    public intermediateWordPost(wordRequest?: WordRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (csrfAuth) required
        if (this.configuration.apiKeys["X-CSRF-TOKEN"]) {
            headers = headers.set('X-CSRF-TOKEN', this.configuration.apiKeys["X-CSRF-TOKEN"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<HTTPSuccessResponse>(`${this.configuration.basePath}/intermediate/word`,
            wordRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Recover existing wallet using seed.
     * @param recoveryRequest RecoveryRequest is request data for /api/v1/check_message_signature
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public recoveryPost(recoveryRequest?: RecoveryRequest, observe?: 'body', reportProgress?: boolean): Observable<HTTPSuccessResponse>;
    public recoveryPost(recoveryRequest?: RecoveryRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HTTPSuccessResponse>>;
    public recoveryPost(recoveryRequest?: RecoveryRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HTTPSuccessResponse>>;
    public recoveryPost(recoveryRequest?: RecoveryRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (csrfAuth) required
        if (this.configuration.apiKeys["X-CSRF-TOKEN"]) {
            headers = headers.set('X-CSRF-TOKEN', this.configuration.apiKeys["X-CSRF-TOKEN"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<HTTPSuccessResponse>(`${this.configuration.basePath}/recovery`,
            recoveryRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Set mnemonic can be used to initialize the device with your own seed.
     * @param setMnemonicRequest SetMnemonicRequest is request data for /api/v1/set_mnemonic
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setMnemonicPost(setMnemonicRequest?: SetMnemonicRequest, observe?: 'body', reportProgress?: boolean): Observable<HTTPSuccessResponse>;
    public setMnemonicPost(setMnemonicRequest?: SetMnemonicRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HTTPSuccessResponse>>;
    public setMnemonicPost(setMnemonicRequest?: SetMnemonicRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HTTPSuccessResponse>>;
    public setMnemonicPost(setMnemonicRequest?: SetMnemonicRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (csrfAuth) required
        if (this.configuration.apiKeys["X-CSRF-TOKEN"]) {
            headers = headers.set('X-CSRF-TOKEN', this.configuration.apiKeys["X-CSRF-TOKEN"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<HTTPSuccessResponse>(`${this.configuration.basePath}/set_mnemonic`,
            setMnemonicRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Configure a pin code on the device.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setPinCodePost(observe?: 'body', reportProgress?: boolean): Observable<HTTPSuccessResponse>;
    public setPinCodePost(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HTTPSuccessResponse>>;
    public setPinCodePost(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HTTPSuccessResponse>>;
    public setPinCodePost(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (csrfAuth) required
        if (this.configuration.apiKeys["X-CSRF-TOKEN"]) {
            headers = headers.set('X-CSRF-TOKEN', this.configuration.apiKeys["X-CSRF-TOKEN"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<HTTPSuccessResponse>(`${this.configuration.basePath}/set_pin_code`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Sign a message using the secret key at given index.
     * @param signMessageRequest SignMessageRequest is request data for /api/signMessage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public signMessagePost(signMessageRequest?: SignMessageRequest, observe?: 'body', reportProgress?: boolean): Observable<SignMessageResponse>;
    public signMessagePost(signMessageRequest?: SignMessageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SignMessageResponse>>;
    public signMessagePost(signMessageRequest?: SignMessageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SignMessageResponse>>;
    public signMessagePost(signMessageRequest?: SignMessageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (csrfAuth) required
        if (this.configuration.apiKeys["X-CSRF-TOKEN"]) {
            headers = headers.set('X-CSRF-TOKEN', this.configuration.apiKeys["X-CSRF-TOKEN"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<SignMessageResponse>(`${this.configuration.basePath}/sign_message`,
            signMessageRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Sign a transaction with the hardware wallet.
     * @param transactionSignRequest TransactionSignRequest is request data for /api/v1/transactionSign
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public transactionSignPost(transactionSignRequest?: TransactionSignRequest, observe?: 'body', reportProgress?: boolean): Observable<TransactionSignResponse>;
    public transactionSignPost(transactionSignRequest?: TransactionSignRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TransactionSignResponse>>;
    public transactionSignPost(transactionSignRequest?: TransactionSignRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TransactionSignResponse>>;
    public transactionSignPost(transactionSignRequest?: TransactionSignRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (csrfAuth) required
        if (this.configuration.apiKeys["X-CSRF-TOKEN"]) {
            headers = headers.set('X-CSRF-TOKEN', this.configuration.apiKeys["X-CSRF-TOKEN"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TransactionSignResponse>(`${this.configuration.basePath}/transaction_sign`,
            transactionSignRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * clean all the configurations.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public wipeDelete(observe?: 'body', reportProgress?: boolean): Observable<HTTPSuccessResponse>;
    public wipeDelete(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HTTPSuccessResponse>>;
    public wipeDelete(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HTTPSuccessResponse>>;
    public wipeDelete(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (csrfAuth) required
        if (this.configuration.apiKeys["X-CSRF-TOKEN"]) {
            headers = headers.set('X-CSRF-TOKEN', this.configuration.apiKeys["X-CSRF-TOKEN"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<HTTPSuccessResponse>(`${this.configuration.basePath}/wipe`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
